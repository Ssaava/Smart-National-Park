
course work.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800200  000018aa  0000193e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800396  00800396  00001ad4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000232b  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e10  00000000  00000000  00003f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aff  00000000  00000000  00004d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00005814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083d  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001161  00000000  00000000  0000620d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000736e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9e c0       	rjmp	.+316    	; 0x13e <__ctors_end>
       2:	00 00       	nop
       4:	6e c6       	rjmp	.+3292   	; 0xce2 <__vector_1>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c0       	rjmp	.+340    	; 0x17e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	90 c0       	rjmp	.+288    	; 0x17e <__bad_interrupt>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop
      98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	68 c0       	rjmp	.+208    	; 0x17e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	66 c0       	rjmp	.+204    	; 0x17e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	64 c0       	rjmp	.+200    	; 0x17e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	62 c0       	rjmp	.+196    	; 0x17e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	60 c0       	rjmp	.+192    	; 0x17e <__bad_interrupt>
      be:	00 00       	nop
      c0:	5e c0       	rjmp	.+188    	; 0x17e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5c c0       	rjmp	.+184    	; 0x17e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	5a c0       	rjmp	.+180    	; 0x17e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	58 c0       	rjmp	.+176    	; 0x17e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	56 c0       	rjmp	.+172    	; 0x17e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	54 c0       	rjmp	.+168    	; 0x17e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	52 c0       	rjmp	.+164    	; 0x17e <__bad_interrupt>
      da:	00 00       	nop
      dc:	50 c0       	rjmp	.+160    	; 0x17e <__bad_interrupt>
      de:	00 00       	nop
      e0:	4e c0       	rjmp	.+156    	; 0x17e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 00       	.word	0x0008	; ????
      e6:	00 00       	nop
      e8:	be 92       	st	-X, r11
      ea:	24 49       	sbci	r18, 0x94	; 148
      ec:	12 3e       	cpi	r17, 0xE2	; 226
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	be cd       	rjmp	.-1156   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
      f4:	cc cc       	rjmp	.-1640   	; 0xfffffa8e <__eeprom_end+0xff7efa8e>
      f6:	4c 3e       	cpi	r20, 0xEC	; 236
      f8:	00 00       	nop
      fa:	00 80       	ld	r0, Z
      fc:	be ab       	std	Y+54, r27	; 0x36
      fe:	aa aa       	std	Y+50, r10	; 0x32
     100:	aa 3e       	cpi	r26, 0xEA	; 234
     102:	00 00       	nop
     104:	00 00       	nop
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	00 08       	sbc	r0, r0
     112:	41 78       	andi	r20, 0x81	; 129
     114:	d3 bb       	out	0x13, r29	; 19
     116:	43 87       	std	Z+11, r20	; 0x0b
     118:	d1 13       	cpse	r29, r17
     11a:	3d 19       	sub	r19, r13
     11c:	0e 3c       	cpi	r16, 0xCE	; 206
     11e:	c3 bd       	out	0x23, r28	; 35
     120:	42 82       	std	Z+2, r4	; 0x02
     122:	ad 2b       	or	r26, r29
     124:	3e 68       	ori	r19, 0x8E	; 142
     126:	ec 82       	std	Y+4, r14	; 0x04
     128:	76 be       	out	0x36, r7	; 54
     12a:	d9 8f       	std	Y+25, r29	; 0x19
     12c:	e1 a9       	ldd	r30, Z+49	; 0x31
     12e:	3e 4c       	sbci	r19, 0xCE	; 206
     130:	80 ef       	ldi	r24, 0xF0	; 240
     132:	ff be       	out	0x3f, r15	; 63
     134:	01 c4       	rjmp	.+2050   	; 0x938 <_Z17monitorGateKeyPadv+0x4c>
     136:	ff 7f       	andi	r31, 0xFF	; 255
     138:	3f 00       	.word	0x003f	; ????
     13a:	00 00       	nop
	...

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d1 e2       	ldi	r29, 0x21	; 33
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0c bf       	out	0x3c, r16	; 60

0000014e <__do_copy_data>:
     14e:	13 e0       	ldi	r17, 0x03	; 3
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b2 e0       	ldi	r27, 0x02	; 2
     154:	ea ea       	ldi	r30, 0xAA	; 170
     156:	f8 e1       	ldi	r31, 0x18	; 24
     158:	00 e0       	ldi	r16, 0x00	; 0
     15a:	0b bf       	out	0x3b, r16	; 59
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
     15e:	07 90       	elpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	a6 39       	cpi	r26, 0x96	; 150
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
     168:	23 e0       	ldi	r18, 0x03	; 3
     16a:	a6 e9       	ldi	r26, 0x96	; 150
     16c:	b3 e0       	ldi	r27, 0x03	; 3
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a0 3e       	cpi	r26, 0xE0	; 224
     174:	b2 07       	cpc	r27, r18
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	7e d5       	rcall	.+2812   	; 0xc76 <main>
     17a:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <_Z5latchi>:
};

struct TouristCar touristCars[CAPACITY];

void latch(int device){
	if (device == 0)
     180:	89 2b       	or	r24, r25
     182:	99 f4       	brne	.+38     	; 0x1aa <_Z5latchi+0x2a>
	{
		//latch gate lcd
		PORTG &= ~(1 << PG5);
     184:	84 b3       	in	r24, 0x14	; 20
     186:	8f 7d       	andi	r24, 0xDF	; 223
     188:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18a:	83 ec       	ldi	r24, 0xC3	; 195
     18c:	99 e0       	ldi	r25, 0x09	; 9
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <_Z5latchi+0xe>
     192:	00 c0       	rjmp	.+0      	; 0x194 <_Z5latchi+0x14>
     194:	00 00       	nop
		_delay_ms(10);
		PORTG |= (1 << PG5);
     196:	84 b3       	in	r24, 0x14	; 20
     198:	80 62       	ori	r24, 0x20	; 32
     19a:	84 bb       	out	0x14, r24	; 20
     19c:	83 ec       	ldi	r24, 0xC3	; 195
     19e:	99 e0       	ldi	r25, 0x09	; 9
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <_Z5latchi+0x20>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <_Z5latchi+0x26>
     1a6:	00 00       	nop
     1a8:	08 95       	ret
		_delay_ms(10);
	}
	else{
		//latch fridge
		PORTC &= ~(1 << PC1);
     1aa:	88 b1       	in	r24, 0x08	; 8
     1ac:	8d 7f       	andi	r24, 0xFD	; 253
     1ae:	88 b9       	out	0x08, r24	; 8
     1b0:	83 ec       	ldi	r24, 0xC3	; 195
     1b2:	99 e0       	ldi	r25, 0x09	; 9
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <_Z5latchi+0x34>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_Z5latchi+0x3a>
     1ba:	00 00       	nop
		_delay_ms(10);
		PORTC |= (1 << PC1);
     1bc:	88 b1       	in	r24, 0x08	; 8
     1be:	82 60       	ori	r24, 0x02	; 2
     1c0:	88 b9       	out	0x08, r24	; 8
     1c2:	83 ec       	ldi	r24, 0xC3	; 195
     1c4:	99 e0       	ldi	r25, 0x09	; 9
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <_Z5latchi+0x46>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_Z5latchi+0x4c>
     1cc:	00 00       	nop
     1ce:	08 95       	ret

000001d0 <_Z14displayMessagePci>:
	
}



void displayMessage(char message[], int device){
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	8c 01       	movw	r16, r24
	if (device == 0)
     1da:	67 2b       	or	r22, r23
     1dc:	21 f5       	brne	.+72     	; 0x226 <_Z14displayMessagePci+0x56>
	{///gate
		PORTG &= ~(1 << PG3); //command mode
     1de:	84 b3       	in	r24, 0x14	; 20
     1e0:	87 7f       	andi	r24, 0xF7	; 247
     1e2:	84 bb       	out	0x14, r24	; 20
		latch(0);
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	cb df       	rcall	.-106    	; 0x180 <_Z5latchi>
		
		
		PORTH = 0b00000001; //clear screen
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		latch(0);
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	c5 df       	rcall	.-118    	; 0x180 <_Z5latchi>
		
		
		PORTG |= (1 << PG3); //data mode
     1f6:	84 b3       	in	r24, 0x14	; 20
     1f8:	88 60       	ori	r24, 0x08	; 8
     1fa:	84 bb       	out	0x14, r24	; 20
		PORTG &= ~(1 << PG4); //write mode
     1fc:	84 b3       	in	r24, 0x14	; 20
     1fe:	8f 7e       	andi	r24, 0xEF	; 239
     200:	84 bb       	out	0x14, r24	; 20
		
		latch(0);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	bc df       	rcall	.-136    	; 0x180 <_Z5latchi>
		int i;
		
		for (i = 0; message[i] != '\0'; i++)
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	d0 e0       	ldi	r29, 0x00	; 0
     20c:	f8 01       	movw	r30, r16
     20e:	ec 0f       	add	r30, r28
     210:	fd 1f       	adc	r31, r29
     212:	80 81       	ld	r24, Z
     214:	88 23       	and	r24, r24
     216:	49 f1       	breq	.+82     	; 0x26a <_Z14displayMessagePci+0x9a>
		{
			PORTH = message[i];
     218:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
			latch(0);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	af df       	rcall	.-162    	; 0x180 <_Z5latchi>
		PORTG &= ~(1 << PG4); //write mode
		
		latch(0);
		int i;
		
		for (i = 0; message[i] != '\0'; i++)
     222:	21 96       	adiw	r28, 0x01	; 1
     224:	f3 cf       	rjmp	.-26     	; 0x20c <_Z14displayMessagePci+0x3c>
			latch(0);
		}
	} 
	else
	{
		PORTC &= ~(1 << PC3); //command mode
     226:	88 b1       	in	r24, 0x08	; 8
     228:	87 7f       	andi	r24, 0xF7	; 247
		latch(1);
     22a:	88 b9       	out	0x08, r24	; 8
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
		
		
		PORTB = 0b00000001; //clear screen
     230:	a7 df       	rcall	.-178    	; 0x180 <_Z5latchi>
     232:	81 e0       	ldi	r24, 0x01	; 1
		latch(1);
     234:	85 b9       	out	0x05, r24	; 5
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	a2 df       	rcall	.-188    	; 0x180 <_Z5latchi>
		
		
		PORTC |= (1 << PC3); //data mode
     23c:	88 b1       	in	r24, 0x08	; 8
     23e:	88 60       	ori	r24, 0x08	; 8
		PORTC &= ~(1 << PC2); //write mode
     240:	88 b9       	out	0x08, r24	; 8
     242:	88 b1       	in	r24, 0x08	; 8
     244:	8b 7f       	andi	r24, 0xFB	; 251
		
		latch(1);
     246:	88 b9       	out	0x08, r24	; 8
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	99 df       	rcall	.-206    	; 0x180 <_Z5latchi>
		int i;
		
		for (i = 0; message[i] != '\0'; i++)
     24e:	c0 e0       	ldi	r28, 0x00	; 0
     250:	d0 e0       	ldi	r29, 0x00	; 0
     252:	f8 01       	movw	r30, r16
     254:	ec 0f       	add	r30, r28
     256:	fd 1f       	adc	r31, r29
     258:	80 81       	ld	r24, Z
     25a:	88 23       	and	r24, r24
		{
			PORTB = message[i];
     25c:	31 f0       	breq	.+12     	; 0x26a <_Z14displayMessagePci+0x9a>
			latch(1);
     25e:	85 b9       	out	0x05, r24	; 5
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	8d df       	rcall	.-230    	; 0x180 <_Z5latchi>
		PORTC &= ~(1 << PC2); //write mode
		
		latch(1);
		int i;
		
		for (i = 0; message[i] != '\0'; i++)
     266:	21 96       	adiw	r28, 0x01	; 1
     268:	f4 cf       	rjmp	.-24     	; 0x252 <_Z14displayMessagePci+0x82>
		{
			PORTB = message[i];
			latch(1);
		}
	}
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <_Z16openAndCloseGatev>:

void openAndCloseGate(){
	//open gate
	displayMessage("OPENING GATE", 0);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	86 e0       	ldi	r24, 0x06	; 6
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	a9 df       	rcall	.-174    	; 0x1d0 <_Z14displayMessagePci>
	PORTF = 0b00000010;
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	81 bb       	out	0x11, r24	; 17
     282:	2f e7       	ldi	r18, 0x7F	; 127
     284:	8a e1       	ldi	r24, 0x1A	; 26
     286:	96 e0       	ldi	r25, 0x06	; 6
     288:	21 50       	subi	r18, 0x01	; 1
     28a:	80 40       	sbci	r24, 0x00	; 0
     28c:	90 40       	sbci	r25, 0x00	; 0
     28e:	e1 f7       	brne	.-8      	; 0x288 <_Z16openAndCloseGatev+0x14>
     290:	00 c0       	rjmp	.+0      	; 0x292 <_Z16openAndCloseGatev+0x1e>
     292:	00 00       	nop
	_delay_ms(2000);
	
	//open gate
	displayMessage("CLOSING GATE", 0);
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	83 e1       	ldi	r24, 0x13	; 19
     29a:	92 e0       	ldi	r25, 0x02	; 2
     29c:	99 df       	rcall	.-206    	; 0x1d0 <_Z14displayMessagePci>
	PORTF = 0b00000001;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	81 bb       	out	0x11, r24	; 17
     2a2:	2f e7       	ldi	r18, 0x7F	; 127
     2a4:	8a e1       	ldi	r24, 0x1A	; 26
     2a6:	96 e0       	ldi	r25, 0x06	; 6
     2a8:	21 50       	subi	r18, 0x01	; 1
     2aa:	80 40       	sbci	r24, 0x00	; 0
     2ac:	90 40       	sbci	r25, 0x00	; 0
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <_Z16openAndCloseGatev+0x34>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <_Z16openAndCloseGatev+0x3e>
     2b2:	00 00       	nop
	
	_delay_ms(2000);
	PORTF = 0x00;
     2b4:	11 ba       	out	0x11, r1	; 17
     2b6:	08 95       	ret

000002b8 <_Z10displayNumii>:
}


void displayNum(int num, int device){
     2b8:	af 92       	push	r10
     2ba:	bf 92       	push	r11
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	8c 01       	movw	r16, r24
     2d2:	6b 01       	movw	r12, r22
	sprintf(numStr, "%d", num); // Convert only the updated inputNum to a string
	

	displayMessage(numStr, device); // Display the updated inputNum
	_delay_ms(1000);
}
     2d4:	ed b6       	in	r14, 0x3d	; 61
     2d6:	fe b6       	in	r15, 0x3e	; 62
	PORTF = 0x00;
}


void displayNum(int num, int device){
	int numLen = (int)((ceil(log10(num)) + 1) * sizeof(char));
     2d8:	bc 01       	movw	r22, r24
     2da:	99 0f       	add	r25, r25
     2dc:	88 0b       	sbc	r24, r24
     2de:	99 0b       	sbc	r25, r25
     2e0:	05 d6       	rcall	.+3082   	; 0xeec <__floatsisf>
     2e2:	d0 d6       	rcall	.+3488   	; 0x1084 <log10>
     2e4:	bd d5       	rcall	.+2938   	; 0xe60 <ceil>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e8       	ldi	r20, 0x80	; 128
     2ec:	5f e3       	ldi	r21, 0x3F	; 63
     2ee:	54 d5       	rcall	.+2728   	; 0xd98 <__addsf3>
     2f0:	ca d5       	rcall	.+2964   	; 0xe86 <__fixsfsi>

	char numStr[numLen];
     2f2:	2d b7       	in	r18, 0x3d	; 61
     2f4:	3e b7       	in	r19, 0x3e	; 62
     2f6:	26 1b       	sub	r18, r22
     2f8:	37 0b       	sbc	r19, r23
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	3e bf       	out	0x3e, r19	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	2d bf       	out	0x3d, r18	; 61
     304:	8d b7       	in	r24, 0x3d	; 61
     306:	9e b7       	in	r25, 0x3e	; 62
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	5c 01       	movw	r10, r24
	sprintf(numStr, "%d", num); // Convert only the updated inputNum to a string
     30c:	1f 93       	push	r17
     30e:	0f 93       	push	r16
     310:	80 e2       	ldi	r24, 0x20	; 32
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	9f 93       	push	r25
     316:	8f 93       	push	r24
     318:	bf 92       	push	r11
     31a:	af 92       	push	r10
	

	displayMessage(numStr, device); // Display the updated inputNum
     31c:	e9 d7       	rcall	.+4050   	; 0x12f0 <sprintf>
     31e:	b6 01       	movw	r22, r12
     320:	8a 2d       	mov	r24, r10
     322:	9b 2d       	mov	r25, r11
     324:	55 df       	rcall	.-342    	; 0x1d0 <_Z14displayMessagePci>
     326:	9f e3       	ldi	r25, 0x3F	; 63
     328:	2d e0       	ldi	r18, 0x0D	; 13
     32a:	33 e0       	ldi	r19, 0x03	; 3
     32c:	91 50       	subi	r25, 0x01	; 1
     32e:	20 40       	sbci	r18, 0x00	; 0
     330:	30 40       	sbci	r19, 0x00	; 0
     332:	e1 f7       	brne	.-8      	; 0x32c <_Z10displayNumii+0x74>
     334:	00 c0       	rjmp	.+0      	; 0x336 <_Z10displayNumii+0x7e>
     336:	00 00       	nop
	_delay_ms(1000);
}
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	fe be       	out	0x3e, r15	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	ed be       	out	0x3d, r14	; 61
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	bf 90       	pop	r11
     360:	af 90       	pop	r10
     362:	08 95       	ret

00000364 <_Z16recordAndDisplayii>:

void recordAndDisplay(int num, int device) {
	if (device == 0)
     364:	67 2b       	or	r22, r23
     366:	c9 f4       	brne	.+50     	; 0x39a <_Z16recordAndDisplayii+0x36>
	{
		inputNum = (inputNum * 10) + num; // Update inputNum
     368:	20 91 de 03 	lds	r18, 0x03DE	; 0x8003de <inputNum>
     36c:	30 91 df 03 	lds	r19, 0x03DF	; 0x8003df <inputNum+0x1>
     370:	a9 01       	movw	r20, r18
     372:	44 0f       	add	r20, r20
     374:	55 1f       	adc	r21, r21
     376:	22 0f       	add	r18, r18
     378:	33 1f       	adc	r19, r19
     37a:	22 0f       	add	r18, r18
     37c:	33 1f       	adc	r19, r19
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	24 0f       	add	r18, r20
     384:	35 1f       	adc	r19, r21
     386:	82 0f       	add	r24, r18
     388:	93 1f       	adc	r25, r19
     38a:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <inputNum+0x1>
     38e:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <inputNum>
		displayNum(inputNum, 0);
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	90 cf       	rjmp	.-224    	; 0x2b8 <_Z10displayNumii>
     398:	08 95       	ret
	}
	else{
		fridgeNum = (fridgeNum * 10) + num; // Update inputNum
     39a:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <fridgeNum>
     39e:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <fridgeNum+0x1>
     3a2:	a9 01       	movw	r20, r18
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	22 0f       	add	r18, r18
     3aa:	33 1f       	adc	r19, r19
     3ac:	22 0f       	add	r18, r18
     3ae:	33 1f       	adc	r19, r19
     3b0:	22 0f       	add	r18, r18
     3b2:	33 1f       	adc	r19, r19
     3b4:	24 0f       	add	r18, r20
     3b6:	35 1f       	adc	r19, r21
     3b8:	82 0f       	add	r24, r18
     3ba:	93 1f       	adc	r25, r19
     3bc:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <fridgeNum+0x1>
     3c0:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <fridgeNum>
		displayNum(fridgeNum, 1);
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	77 cf       	rjmp	.-274    	; 0x2b8 <_Z10displayNumii>
     3ca:	08 95       	ret

000003cc <_Z27displayDefaultFridgeMessagev>:
	}
	
}

void displayDefaultFridgeMessage(){
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	c8 5e       	subi	r28, 0xE8	; 232
     3e2:	d3 40       	sbci	r29, 0x03	; 3
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
		
		snprintf(buf, sizeof(buf), "%s%s", msg, bottleCostStr); //concatenate strings
		
		
		displayMessage(buf, 1);
}
     3ee:	cd b6       	in	r12, 0x3d	; 61
     3f0:	de b6       	in	r13, 0x3e	; 62
	
}

void displayDefaultFridgeMessage(){
		//display fridge message
		int numLen = (int)((ceil(log10(bottleCost)) + 1) * sizeof(char)); //to get the length of an integer
     3f2:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <bottleCost>
     3f6:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <bottleCost+0x1>
     3fa:	b7 01       	movw	r22, r14
     3fc:	0f 2c       	mov	r0, r15
     3fe:	00 0c       	add	r0, r0
     400:	88 0b       	sbc	r24, r24
     402:	99 0b       	sbc	r25, r25
     404:	73 d5       	rcall	.+2790   	; 0xeec <__floatsisf>
     406:	3e d6       	rcall	.+3196   	; 0x1084 <log10>
     408:	2b d5       	rcall	.+2646   	; 0xe60 <ceil>
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e8       	ldi	r20, 0x80	; 128
     410:	5f e3       	ldi	r21, 0x3F	; 63
     412:	c2 d4       	rcall	.+2436   	; 0xd98 <__addsf3>
     414:	38 d5       	rcall	.+2672   	; 0xe86 <__fixsfsi>

		char bottleCostStr[numLen];
     416:	2d b7       	in	r18, 0x3d	; 61
     418:	3e b7       	in	r19, 0x3e	; 62
     41a:	26 1b       	sub	r18, r22
     41c:	37 0b       	sbc	r19, r23
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	3e bf       	out	0x3e, r19	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	2d bf       	out	0x3d, r18	; 61
     428:	0d b7       	in	r16, 0x3d	; 61
     42a:	1e b7       	in	r17, 0x3e	; 62
     42c:	0f 5f       	subi	r16, 0xFF	; 255
     42e:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(bottleCostStr, "%d", bottleCost);
     430:	ff 92       	push	r15
     432:	ef 92       	push	r14
     434:	80 e2       	ldi	r24, 0x20	; 32
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	1f 93       	push	r17
     43e:	0f 93       	push	r16
     440:	57 d7       	rcall	.+3758   	; 0x12f0 <sprintf>

		
		char* msg = "ENTER IN NO BOTTLE @";
		char buf[1000];
		
		snprintf(buf, sizeof(buf), "%s%s", msg, bottleCostStr); //concatenate strings
     442:	1f 93       	push	r17
     444:	0f 93       	push	r16
     446:	83 e2       	ldi	r24, 0x23	; 35
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	8b e6       	ldi	r24, 0x6B	; 107
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	9f 93       	push	r25
     454:	8f 93       	push	r24
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	8f 93       	push	r24
     45a:	88 ee       	ldi	r24, 0xE8	; 232
     45c:	8f 93       	push	r24
     45e:	8e 01       	movw	r16, r28
     460:	0f 5f       	subi	r16, 0xFF	; 255
     462:	1f 4f       	sbci	r17, 0xFF	; 255
     464:	1f 93       	push	r17
     466:	0f 93       	push	r16
		
		
		displayMessage(buf, 1);
     468:	07 d7       	rcall	.+3598   	; 0x1278 <snprintf>
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	c8 01       	movw	r24, r16
     470:	af de       	rcall	.-674    	; 0x1d0 <_Z14displayMessagePci>
}
     472:	8d b7       	in	r24, 0x3d	; 61
     474:	9e b7       	in	r25, 0x3e	; 62
     476:	40 96       	adiw	r24, 0x10	; 16
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	9e bf       	out	0x3e, r25	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	8d bf       	out	0x3d, r24	; 61
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de be       	out	0x3e, r13	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd be       	out	0x3d, r12	; 61
     48c:	c8 51       	subi	r28, 0x18	; 24
     48e:	dc 4f       	sbci	r29, 0xFC	; 252
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	08 95       	ret

000004ac <_Z19monitorFridgeKeyPadv>:
		monitorFridgeKeyPad();
		
    }
}

void monitorFridgeKeyPad(){
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	c8 5e       	subi	r28, 0xE8	; 232
     4c6:	d3 40       	sbci	r29, 0x03	; 3
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
			
			fridgeNum = 0;
			fridgeMode = 0;
			displayDefaultFridgeMessage();
		}
}
     4d2:	0d b7       	in	r16, 0x3d	; 61
     4d4:	1e b7       	in	r17, 0x3e	; 62
		
    }
}

void monitorFridgeKeyPad(){
	PORTE = 0b11111011;
     4d6:	8b ef       	ldi	r24, 0xFB	; 251
     4d8:	8e b9       	out	0x0e, r24	; 14
	if ((PINE & 0b00001000) == 0)
     4da:	63 99       	sbic	0x0c, 3	; 12
     4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <_Z19monitorFridgeKeyPadv+0x48>
     4de:	8b e7       	ldi	r24, 0x7B	; 123
     4e0:	92 e9       	ldi	r25, 0x92	; 146
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <_Z19monitorFridgeKeyPadv+0x36>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <_Z19monitorFridgeKeyPadv+0x3c>
     4e8:	00 00       	nop
		{ //1
			_delay_ms(150); // to avoid the bouncing contact point error
			recordAndDisplay(1, 1);
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	38 df       	rcall	.-400    	; 0x364 <_Z16recordAndDisplayii>
		}
		
		if ((PINE & 0b00010000) == 0)
     4f4:	64 99       	sbic	0x0c, 4	; 12
     4f6:	0b c0       	rjmp	.+22     	; 0x50e <_Z19monitorFridgeKeyPadv+0x62>
     4f8:	8b e7       	ldi	r24, 0x7B	; 123
     4fa:	92 e9       	ldi	r25, 0x92	; 146
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <_Z19monitorFridgeKeyPadv+0x50>
     500:	00 c0       	rjmp	.+0      	; 0x502 <_Z19monitorFridgeKeyPadv+0x56>
     502:	00 00       	nop
		{ //4
			_delay_ms(150); // to avoid the bouncing contact point error
			recordAndDisplay(4, 1);
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	2b df       	rcall	.-426    	; 0x364 <_Z16recordAndDisplayii>
		}
		
		if ((PINE & 0b00100000) == 0)
     50e:	65 99       	sbic	0x0c, 5	; 12
     510:	0b c0       	rjmp	.+22     	; 0x528 <_Z19monitorFridgeKeyPadv+0x7c>
     512:	8b e7       	ldi	r24, 0x7B	; 123
     514:	92 e9       	ldi	r25, 0x92	; 146
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <_Z19monitorFridgeKeyPadv+0x6a>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <_Z19monitorFridgeKeyPadv+0x70>
     51c:	00 00       	nop
		{ //7
			_delay_ms(150); // to avoid the bouncing contact point error
			recordAndDisplay(7, 1);
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	87 e0       	ldi	r24, 0x07	; 7
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	1e df       	rcall	.-452    	; 0x364 <_Z16recordAndDisplayii>
		}
		
		if ((PINE & 0b01000000) == 0)
     528:	66 99       	sbic	0x0c, 6	; 12
     52a:	5f c1       	rjmp	.+702    	; 0x7ea <_Z19monitorFridgeKeyPadv+0x33e>
     52c:	8b e7       	ldi	r24, 0x7B	; 123
     52e:	92 e9       	ldi	r25, 0x92	; 146
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <_Z19monitorFridgeKeyPadv+0x84>
     534:	00 c0       	rjmp	.+0      	; 0x536 <_Z19monitorFridgeKeyPadv+0x8a>
     536:	00 00       	nop
		{ //*
			_delay_ms(150); // to avoid the bouncing contact point error
			if (fridgeMode == 0)
     538:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <fridgeMode>
     53c:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <fridgeMode+0x1>
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	09 f0       	breq	.+2      	; 0x546 <_Z19monitorFridgeKeyPadv+0x9a>
     544:	af c0       	rjmp	.+350    	; 0x6a4 <_Z19monitorFridgeKeyPadv+0x1f8>
			{
				if (totalBottles <= fridgeNum)
     546:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     54a:	f0 90 01 02 	lds	r15, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     54e:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <fridgeNum>
     552:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <fridgeNum+0x1>
     556:	8e 15       	cp	r24, r14
     558:	9f 05       	cpc	r25, r15
     55a:	0c f4       	brge	.+2      	; 0x55e <_Z19monitorFridgeKeyPadv+0xb2>
     55c:	45 c0       	rjmp	.+138    	; 0x5e8 <_Z19monitorFridgeKeyPadv+0x13c>
					
					char* msg = "ENTER BOTTLES less than ";
					char buf[1000];
					
					snprintf(buf, sizeof(buf), "%s%s", msg, bottlesStr);
					displayMessage(buf, 1);
     55e:	cd b6       	in	r12, 0x3d	; 61
     560:	de b6       	in	r13, 0x3e	; 62
			_delay_ms(150); // to avoid the bouncing contact point error
			if (fridgeMode == 0)
			{
				if (totalBottles <= fridgeNum)
				{
					int numLen = (int)((ceil(log10(totalBottles)) + 1) * sizeof(char));
     562:	b7 01       	movw	r22, r14
     564:	0f 2c       	mov	r0, r15
     566:	00 0c       	add	r0, r0
     568:	88 0b       	sbc	r24, r24
     56a:	99 0b       	sbc	r25, r25
     56c:	bf d4       	rcall	.+2430   	; 0xeec <__floatsisf>
     56e:	8a d5       	rcall	.+2836   	; 0x1084 <log10>
     570:	77 d4       	rcall	.+2286   	; 0xe60 <ceil>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e8       	ldi	r20, 0x80	; 128
     578:	5f e3       	ldi	r21, 0x3F	; 63
     57a:	0e d4       	rcall	.+2076   	; 0xd98 <__addsf3>
     57c:	84 d4       	rcall	.+2312   	; 0xe86 <__fixsfsi>

					char bottlesStr[numLen];
     57e:	2d b7       	in	r18, 0x3d	; 61
     580:	3e b7       	in	r19, 0x3e	; 62
     582:	26 1b       	sub	r18, r22
     584:	37 0b       	sbc	r19, r23
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	3e bf       	out	0x3e, r19	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	2d bf       	out	0x3d, r18	; 61
     590:	8d b7       	in	r24, 0x3d	; 61
     592:	9e b7       	in	r25, 0x3e	; 62
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	5c 01       	movw	r10, r24
					sprintf(bottlesStr, "%d", totalBottles);
     598:	ff 92       	push	r15
     59a:	ef 92       	push	r14
     59c:	80 e2       	ldi	r24, 0x20	; 32
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	bf 92       	push	r11
     5a6:	af 92       	push	r10
     5a8:	a3 d6       	rcall	.+3398   	; 0x12f0 <sprintf>

					
					char* msg = "ENTER BOTTLES less than ";
					char buf[1000];
					
					snprintf(buf, sizeof(buf), "%s%s", msg, bottlesStr);
     5aa:	bf 92       	push	r11
     5ac:	af 92       	push	r10
     5ae:	88 e3       	ldi	r24, 0x38	; 56
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	8b e6       	ldi	r24, 0x6B	; 107
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	8f 93       	push	r24
     5c2:	88 ee       	ldi	r24, 0xE8	; 232
     5c4:	8f 93       	push	r24
     5c6:	9e 01       	movw	r18, r28
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	79 01       	movw	r14, r18
     5ce:	3f 93       	push	r19
     5d0:	2f 93       	push	r18
					displayMessage(buf, 1);
     5d2:	52 d6       	rcall	.+3236   	; 0x1278 <snprintf>
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	c7 01       	movw	r24, r14
     5da:	fa dd       	rcall	.-1036   	; 0x1d0 <_Z14displayMessagePci>
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de be       	out	0x3e, r13	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd be       	out	0x3d, r12	; 61
     5e6:	fd c0       	rjmp	.+506    	; 0x7e2 <_Z19monitorFridgeKeyPadv+0x336>
					char buf[1000];
					
					snprintf(buf, sizeof(buf), "%s%s%s", msg, expectedMoneyStr, ms2);
					
					displayMessage(buf, 1);
					fridgeMode = 1;
     5e8:	cd b6       	in	r12, 0x3d	; 61
     5ea:	de b6       	in	r13, 0x3e	; 62
					
					snprintf(buf, sizeof(buf), "%s%s", msg, bottlesStr);
					displayMessage(buf, 1);
				}
				else{
					expectedMoney = fridgeNum * bottleCost;
     5ec:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <bottleCost>
     5f0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <bottleCost+0x1>
     5f4:	82 9f       	mul	r24, r18
     5f6:	70 01       	movw	r14, r0
     5f8:	83 9f       	mul	r24, r19
     5fa:	f0 0c       	add	r15, r0
     5fc:	92 9f       	mul	r25, r18
     5fe:	f0 0c       	add	r15, r0
     600:	11 24       	eor	r1, r1
     602:	f0 92 d3 03 	sts	0x03D3, r15	; 0x8003d3 <expectedMoney+0x1>
					
					int numLen = (int)((ceil(log10(expectedMoney)) + 1) * sizeof(char));
     606:	e0 92 d2 03 	sts	0x03D2, r14	; 0x8003d2 <expectedMoney>
     60a:	b7 01       	movw	r22, r14
     60c:	0f 2c       	mov	r0, r15
     60e:	00 0c       	add	r0, r0
     610:	88 0b       	sbc	r24, r24
     612:	99 0b       	sbc	r25, r25
     614:	6b d4       	rcall	.+2262   	; 0xeec <__floatsisf>
     616:	36 d5       	rcall	.+2668   	; 0x1084 <log10>
     618:	23 d4       	rcall	.+2118   	; 0xe60 <ceil>
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e8       	ldi	r20, 0x80	; 128
     620:	5f e3       	ldi	r21, 0x3F	; 63
     622:	ba d3       	rcall	.+1908   	; 0xd98 <__addsf3>
     624:	30 d4       	rcall	.+2144   	; 0xe86 <__fixsfsi>

					char expectedMoneyStr[numLen];
     626:	2d b7       	in	r18, 0x3d	; 61
     628:	3e b7       	in	r19, 0x3e	; 62
     62a:	26 1b       	sub	r18, r22
     62c:	37 0b       	sbc	r19, r23
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	3e bf       	out	0x3e, r19	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	2d bf       	out	0x3d, r18	; 61
     638:	8d b7       	in	r24, 0x3d	; 61
     63a:	9e b7       	in	r25, 0x3e	; 62
     63c:	01 96       	adiw	r24, 0x01	; 1
					sprintf(expectedMoneyStr, "%d", expectedMoney);
     63e:	5c 01       	movw	r10, r24
     640:	ff 92       	push	r15
     642:	ef 92       	push	r14
     644:	80 e2       	ldi	r24, 0x20	; 32
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	bf 92       	push	r11
     64e:	af 92       	push	r10
     650:	4f d6       	rcall	.+3230   	; 0x12f0 <sprintf>
					
					char* msg = "ADD ";
					char* ms2 = " IN THE MONEY SLOT";
					char buf[1000];
					
					snprintf(buf, sizeof(buf), "%s%s%s", msg, expectedMoneyStr, ms2);
     652:	81 e5       	ldi	r24, 0x51	; 81
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	bf 92       	push	r11
     65c:	af 92       	push	r10
     65e:	84 e6       	ldi	r24, 0x64	; 100
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	89 e6       	ldi	r24, 0x69	; 105
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	8f 93       	push	r24
     672:	88 ee       	ldi	r24, 0xE8	; 232
     674:	8f 93       	push	r24
     676:	9e 01       	movw	r18, r28
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
     67c:	79 01       	movw	r14, r18
     67e:	3f 93       	push	r19
     680:	2f 93       	push	r18
					
					displayMessage(buf, 1);
     682:	fa d5       	rcall	.+3060   	; 0x1278 <snprintf>
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	c7 01       	movw	r24, r14
     68a:	a2 dd       	rcall	.-1212   	; 0x1d0 <_Z14displayMessagePci>
					fridgeMode = 1;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <fridgeMode+0x1>
     694:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <fridgeMode>
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de be       	out	0x3e, r13	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd be       	out	0x3d, r12	; 61
     6a2:	9f c0       	rjmp	.+318    	; 0x7e2 <_Z19monitorFridgeKeyPadv+0x336>
				}
			}
			else if (fridgeMode == 1)
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	09 f0       	breq	.+2      	; 0x6aa <_Z19monitorFridgeKeyPadv+0x1fe>
     6a8:	9c c0       	rjmp	.+312    	; 0x7e2 <_Z19monitorFridgeKeyPadv+0x336>
			{
				if (fridgeNum >= expectedMoney)
     6aa:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <fridgeNum>
     6ae:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <fridgeNum+0x1>
     6b2:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <expectedMoney>
     6b6:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <expectedMoney+0x1>
     6ba:	28 17       	cp	r18, r24
     6bc:	39 07       	cpc	r19, r25
     6be:	0c f4       	brge	.+2      	; 0x6c2 <_Z19monitorFridgeKeyPadv+0x216>
				{
					collectedMoney += fridgeNum;
     6c0:	8b c0       	rjmp	.+278    	; 0x7d8 <_Z19monitorFridgeKeyPadv+0x32c>
     6c2:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <collectedMoney>
     6c6:	50 91 d5 03 	lds	r21, 0x03D5	; 0x8003d5 <collectedMoney+0x1>
     6ca:	24 0f       	add	r18, r20
     6cc:	35 1f       	adc	r19, r21
     6ce:	30 93 d5 03 	sts	0x03D5, r19	; 0x8003d5 <collectedMoney+0x1>
     6d2:	20 93 d4 03 	sts	0x03D4, r18	; 0x8003d4 <collectedMoney>
					int bottles = expectedMoney / bottleCost;
     6d6:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <bottleCost>
     6da:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <bottleCost+0x1>
					totalBottles -= bottles;
     6de:	a5 d5       	rcall	.+2890   	; 0x122a <__divmodhi4>
     6e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     6e4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     6e8:	86 1b       	sub	r24, r22
     6ea:	97 0b       	sbc	r25, r23
     6ec:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     6f0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
					
					displayMessage("MONEY SLOT OPENING", 1);
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e7       	ldi	r24, 0x70	; 112
     6fa:	92 e0       	ldi	r25, 0x02	; 2
					
					PORTC |= (1 << PC5);
     6fc:	69 dd       	rcall	.-1326   	; 0x1d0 <_Z14displayMessagePci>
     6fe:	88 b1       	in	r24, 0x08	; 8
     700:	80 62       	ori	r24, 0x20	; 32
     702:	88 b9       	out	0x08, r24	; 8
     704:	3f e7       	ldi	r19, 0x7F	; 127
     706:	8a e1       	ldi	r24, 0x1A	; 26
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	31 50       	subi	r19, 0x01	; 1
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <_Z19monitorFridgeKeyPadv+0x25e>
     712:	00 c0       	rjmp	.+0      	; 0x714 <_Z19monitorFridgeKeyPadv+0x268>
					_delay_ms(2000);
					
					PORTC &= ~(1 << PC5);
     714:	00 00       	nop
     716:	88 b1       	in	r24, 0x08	; 8
					displayMessage("ADD THE MONEY", 1);
     718:	8f 7d       	andi	r24, 0xDF	; 223
     71a:	88 b9       	out	0x08, r24	; 8
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	83 e8       	ldi	r24, 0x83	; 131
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	55 dd       	rcall	.-1366   	; 0x1d0 <_Z14displayMessagePci>
     726:	2f e7       	ldi	r18, 0x7F	; 127
     728:	3a e1       	ldi	r19, 0x1A	; 26
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	80 40       	sbci	r24, 0x00	; 0
     732:	e1 f7       	brne	.-8      	; 0x72c <_Z19monitorFridgeKeyPadv+0x280>
     734:	00 c0       	rjmp	.+0      	; 0x736 <_Z19monitorFridgeKeyPadv+0x28a>
					_delay_ms(2000);
					
					displayMessage("CLOSING SLOT", 1);
     736:	00 00       	nop
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	81 e9       	ldi	r24, 0x91	; 145
     73e:	92 e0       	ldi	r25, 0x02	; 2
					PORTC |= (1 << PC4);
     740:	47 dd       	rcall	.-1394   	; 0x1d0 <_Z14displayMessagePci>
     742:	88 b1       	in	r24, 0x08	; 8
     744:	80 61       	ori	r24, 0x10	; 16
     746:	88 b9       	out	0x08, r24	; 8
     748:	9f e7       	ldi	r25, 0x7F	; 127
     74a:	2a e1       	ldi	r18, 0x1A	; 26
     74c:	36 e0       	ldi	r19, 0x06	; 6
     74e:	91 50       	subi	r25, 0x01	; 1
     750:	20 40       	sbci	r18, 0x00	; 0
     752:	30 40       	sbci	r19, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <_Z19monitorFridgeKeyPadv+0x2a2>
     756:	00 c0       	rjmp	.+0      	; 0x758 <_Z19monitorFridgeKeyPadv+0x2ac>
					_delay_ms(2000);
					
					PORTC &= ~(1 << PC4); //stop motor
     758:	00 00       	nop
     75a:	88 b1       	in	r24, 0x08	; 8
     75c:	8f 7e       	andi	r24, 0xEF	; 239
					
					displayMessage("OPENING BOTTLE SLOT", 1);
     75e:	88 b9       	out	0x08, r24	; 8
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	8e e9       	ldi	r24, 0x9E	; 158
     766:	92 e0       	ldi	r25, 0x02	; 2
					PORTC |= (1 << PC6);
     768:	33 dd       	rcall	.-1434   	; 0x1d0 <_Z14displayMessagePci>
     76a:	88 b1       	in	r24, 0x08	; 8
     76c:	80 64       	ori	r24, 0x40	; 64
     76e:	88 b9       	out	0x08, r24	; 8
     770:	8f e7       	ldi	r24, 0x7F	; 127
     772:	9a e1       	ldi	r25, 0x1A	; 26
     774:	26 e0       	ldi	r18, 0x06	; 6
     776:	81 50       	subi	r24, 0x01	; 1
     778:	90 40       	sbci	r25, 0x00	; 0
     77a:	20 40       	sbci	r18, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <_Z19monitorFridgeKeyPadv+0x2ca>
					_delay_ms(2000);
					
					PORTC &= ~(1 << PC6);
     77e:	00 c0       	rjmp	.+0      	; 0x780 <_Z19monitorFridgeKeyPadv+0x2d4>
     780:	00 00       	nop
     782:	88 b1       	in	r24, 0x08	; 8
					displayMessage("PICK YOUR BOTTLE", 1);
     784:	8f 7b       	andi	r24, 0xBF	; 191
     786:	88 b9       	out	0x08, r24	; 8
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	82 eb       	ldi	r24, 0xB2	; 178
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	1f dd       	rcall	.-1474   	; 0x1d0 <_Z14displayMessagePci>
     792:	3f e7       	ldi	r19, 0x7F	; 127
     794:	8a e1       	ldi	r24, 0x1A	; 26
     796:	96 e0       	ldi	r25, 0x06	; 6
     798:	31 50       	subi	r19, 0x01	; 1
     79a:	80 40       	sbci	r24, 0x00	; 0
     79c:	90 40       	sbci	r25, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <_Z19monitorFridgeKeyPadv+0x2ec>
					_delay_ms(2000);
					
					displayMessage("CLOSING BOTTLE SLOT", 1);
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <_Z19monitorFridgeKeyPadv+0x2f6>
     7a2:	00 00       	nop
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	83 ec       	ldi	r24, 0xC3	; 195
					PORTC |= (1 << PC7);
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	11 dd       	rcall	.-1502   	; 0x1d0 <_Z14displayMessagePci>
     7ae:	88 b1       	in	r24, 0x08	; 8
     7b0:	80 68       	ori	r24, 0x80	; 128
     7b2:	88 b9       	out	0x08, r24	; 8
     7b4:	2f e7       	ldi	r18, 0x7F	; 127
     7b6:	3a e1       	ldi	r19, 0x1A	; 26
     7b8:	86 e0       	ldi	r24, 0x06	; 6
     7ba:	21 50       	subi	r18, 0x01	; 1
     7bc:	30 40       	sbci	r19, 0x00	; 0
     7be:	80 40       	sbci	r24, 0x00	; 0
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <_Z19monitorFridgeKeyPadv+0x30e>
					_delay_ms(2000);
					
					PORTC &= ~(1 << PC7); //stop motor
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <_Z19monitorFridgeKeyPadv+0x318>
     7c4:	00 00       	nop
     7c6:	88 b1       	in	r24, 0x08	; 8
					fridgeMode = 0;
     7c8:	8f 77       	andi	r24, 0x7F	; 127
     7ca:	88 b9       	out	0x08, r24	; 8
     7cc:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <fridgeMode+0x1>
					
					displayDefaultFridgeMessage();
     7d0:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <fridgeMode>
					
				}
				else{
					
					displayMessage("FAILED !,INSUFFICIENT MONEY", 1);
     7d4:	fb dd       	rcall	.-1034   	; 0x3cc <_Z27displayDefaultFridgeMessagev>
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <_Z19monitorFridgeKeyPadv+0x336>
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	87 ed       	ldi	r24, 0xD7	; 215
     7de:	92 e0       	ldi	r25, 0x02	; 2
				}
			}
			
			
			fridgeNum = 0; // reset
     7e0:	f7 dc       	rcall	.-1554   	; 0x1d0 <_Z14displayMessagePci>
     7e2:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <fridgeNum+0x1>
		}
		
		PORTE = 0b11111101;
     7e6:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <fridgeNum>
		
		if ((PINE & 0b00001000) == 0)
     7ea:	8d ef       	ldi	r24, 0xFD	; 253
     7ec:	8e b9       	out	0x0e, r24	; 14
     7ee:	63 99       	sbic	0x0c, 3	; 12
     7f0:	0b c0       	rjmp	.+22     	; 0x808 <_Z19monitorFridgeKeyPadv+0x35c>
     7f2:	8b e7       	ldi	r24, 0x7B	; 123
     7f4:	92 e9       	ldi	r25, 0x92	; 146
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <_Z19monitorFridgeKeyPadv+0x34a>
		{ //3
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(2, 1);
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <_Z19monitorFridgeKeyPadv+0x350>
     7fc:	00 00       	nop
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	82 e0       	ldi	r24, 0x02	; 2
		}
		
		if ((PINE & 0b00010000) == 0)
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	ae dd       	rcall	.-1188   	; 0x364 <_Z16recordAndDisplayii>
     808:	64 99       	sbic	0x0c, 4	; 12
     80a:	0b c0       	rjmp	.+22     	; 0x822 <_Z19monitorFridgeKeyPadv+0x376>
     80c:	8b e7       	ldi	r24, 0x7B	; 123
     80e:	92 e9       	ldi	r25, 0x92	; 146
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <_Z19monitorFridgeKeyPadv+0x364>
		{ //5
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(5, 1);
     814:	00 c0       	rjmp	.+0      	; 0x816 <_Z19monitorFridgeKeyPadv+0x36a>
     816:	00 00       	nop
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	85 e0       	ldi	r24, 0x05	; 5
		}
		
		if ((PINE & 0b00100000) == 0)
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a1 dd       	rcall	.-1214   	; 0x364 <_Z16recordAndDisplayii>
     822:	65 99       	sbic	0x0c, 5	; 12
     824:	0b c0       	rjmp	.+22     	; 0x83c <_Z19monitorFridgeKeyPadv+0x390>
     826:	8b e7       	ldi	r24, 0x7B	; 123
     828:	92 e9       	ldi	r25, 0x92	; 146
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <_Z19monitorFridgeKeyPadv+0x37e>
		{ //8
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(8, 1);
     82e:	00 c0       	rjmp	.+0      	; 0x830 <_Z19monitorFridgeKeyPadv+0x384>
     830:	00 00       	nop
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	88 e0       	ldi	r24, 0x08	; 8
		}
		
		if ((PINE & 0b01000000) == 0)
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	94 dd       	rcall	.-1240   	; 0x364 <_Z16recordAndDisplayii>
     83c:	66 99       	sbic	0x0c, 6	; 12
     83e:	0b c0       	rjmp	.+22     	; 0x856 <_Z19monitorFridgeKeyPadv+0x3aa>
     840:	8b e7       	ldi	r24, 0x7B	; 123
     842:	92 e9       	ldi	r25, 0x92	; 146
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <_Z19monitorFridgeKeyPadv+0x398>
		{ //0
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(0, 1);
     848:	00 c0       	rjmp	.+0      	; 0x84a <_Z19monitorFridgeKeyPadv+0x39e>
     84a:	00 00       	nop
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		
		PORTE = 0b11111110;
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	87 dd       	rcall	.-1266   	; 0x364 <_Z16recordAndDisplayii>
		
		if ((PINE & 0b00001000) == 0)
     856:	8e ef       	ldi	r24, 0xFE	; 254
     858:	8e b9       	out	0x0e, r24	; 14
     85a:	63 99       	sbic	0x0c, 3	; 12
     85c:	0b c0       	rjmp	.+22     	; 0x874 <_Z19monitorFridgeKeyPadv+0x3c8>
     85e:	8b e7       	ldi	r24, 0x7B	; 123
     860:	92 e9       	ldi	r25, 0x92	; 146
     862:	01 97       	sbiw	r24, 0x01	; 1
		{ //3
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(3, 1);
     864:	f1 f7       	brne	.-4      	; 0x862 <_Z19monitorFridgeKeyPadv+0x3b6>
     866:	00 c0       	rjmp	.+0      	; 0x868 <_Z19monitorFridgeKeyPadv+0x3bc>
     868:	00 00       	nop
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	83 e0       	ldi	r24, 0x03	; 3
		}
		
		if ((PINE & 0b00010000) == 0)
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	78 dd       	rcall	.-1296   	; 0x364 <_Z16recordAndDisplayii>
     874:	64 99       	sbic	0x0c, 4	; 12
     876:	0b c0       	rjmp	.+22     	; 0x88e <_Z19monitorFridgeKeyPadv+0x3e2>
     878:	8b e7       	ldi	r24, 0x7B	; 123
     87a:	92 e9       	ldi	r25, 0x92	; 146
     87c:	01 97       	sbiw	r24, 0x01	; 1
		{ //5
			_delay_ms(150); // to avoid the bouncing contact point error
			recordAndDisplay(6, 1);
     87e:	f1 f7       	brne	.-4      	; 0x87c <_Z19monitorFridgeKeyPadv+0x3d0>
     880:	00 c0       	rjmp	.+0      	; 0x882 <_Z19monitorFridgeKeyPadv+0x3d6>
     882:	00 00       	nop
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	86 e0       	ldi	r24, 0x06	; 6
		}
		
		if ((PINE & 0b00100000) == 0)
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	6b dd       	rcall	.-1322   	; 0x364 <_Z16recordAndDisplayii>
     88e:	65 99       	sbic	0x0c, 5	; 12
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <_Z19monitorFridgeKeyPadv+0x3fc>
     892:	8b e7       	ldi	r24, 0x7B	; 123
     894:	92 e9       	ldi	r25, 0x92	; 146
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <_Z19monitorFridgeKeyPadv+0x3ea>
		{ //8
			_delay_ms(150);
			recordAndDisplay(9, 1);
     89a:	00 c0       	rjmp	.+0      	; 0x89c <_Z19monitorFridgeKeyPadv+0x3f0>
     89c:	00 00       	nop
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	89 e0       	ldi	r24, 0x09	; 9
     8a4:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if ((PINE & 0b01000000) == 0)
     8a6:	5e dd       	rcall	.-1348   	; 0x364 <_Z16recordAndDisplayii>
     8a8:	66 99       	sbic	0x0c, 6	; 12
		{ //0
			
			fridgeNum = 0;
     8aa:	09 c0       	rjmp	.+18     	; 0x8be <_Z19monitorFridgeKeyPadv+0x412>
     8ac:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <fridgeNum+0x1>
     8b0:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <fridgeNum>
			fridgeMode = 0;
     8b4:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <fridgeMode+0x1>
     8b8:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <fridgeMode>
			displayDefaultFridgeMessage();
     8bc:	87 dd       	rcall	.-1266   	; 0x3cc <_Z27displayDefaultFridgeMessagev>
		}
}
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	1e bf       	out	0x3e, r17	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0d bf       	out	0x3d, r16	; 61
     8c8:	c8 51       	subi	r28, 0x18	; 24
     8ca:	dc 4f       	sbci	r29, 0xFC	; 252
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	08 95       	ret

000008ec <_Z17monitorGateKeyPadv>:

void monitorGateKeyPad(){
	PORTK = 0b11111011;
     8ec:	8b ef       	ldi	r24, 0xFB	; 251
     8ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	if ((PINK & 0b00001000) == 0)
     8f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     8f6:	83 fd       	sbrc	r24, 3
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <_Z17monitorGateKeyPadv+0x24>
     8fa:	8b e7       	ldi	r24, 0x7B	; 123
     8fc:	92 e9       	ldi	r25, 0x92	; 146
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <_Z17monitorGateKeyPadv+0x12>
     902:	00 c0       	rjmp	.+0      	; 0x904 <_Z17monitorGateKeyPadv+0x18>
     904:	00 00       	nop
		{ //1
			_delay_ms(150); // to avoid the bouncing contact point error
			recordAndDisplay(1, 0);
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	2a dd       	rcall	.-1452   	; 0x364 <_Z16recordAndDisplayii>
		}
		
		if ((PINK & 0b00010000) == 0)
     910:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     914:	84 fd       	sbrc	r24, 4
     916:	0b c0       	rjmp	.+22     	; 0x92e <_Z17monitorGateKeyPadv+0x42>
     918:	8b e7       	ldi	r24, 0x7B	; 123
     91a:	92 e9       	ldi	r25, 0x92	; 146
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <_Z17monitorGateKeyPadv+0x30>
     920:	00 c0       	rjmp	.+0      	; 0x922 <_Z17monitorGateKeyPadv+0x36>
     922:	00 00       	nop
		{ //4
			_delay_ms(150); // to avoid the bouncing contact point error
			recordAndDisplay(4, 0);
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	1b dd       	rcall	.-1482   	; 0x364 <_Z16recordAndDisplayii>
		}
		
		if ((PINK & 0b00100000) == 0)
     92e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     932:	85 fd       	sbrc	r24, 5
     934:	0b c0       	rjmp	.+22     	; 0x94c <_Z17monitorGateKeyPadv+0x60>
     936:	8b e7       	ldi	r24, 0x7B	; 123
     938:	92 e9       	ldi	r25, 0x92	; 146
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <_Z17monitorGateKeyPadv+0x4e>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <_Z17monitorGateKeyPadv+0x54>
     940:	00 00       	nop
		{ //7
			_delay_ms(150); // to avoid the bouncing contact point error
			recordAndDisplay(7, 0);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	87 e0       	ldi	r24, 0x07	; 7
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0c dd       	rcall	.-1512   	; 0x364 <_Z16recordAndDisplayii>
		}
		
		if ((PINK & 0b01000000) == 0)
     94c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     950:	86 fd       	sbrc	r24, 6
     952:	fe c0       	rjmp	.+508    	; 0xb50 <_Z17monitorGateKeyPadv+0x264>
     954:	8b e7       	ldi	r24, 0x7B	; 123
     956:	92 e9       	ldi	r25, 0x92	; 146
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <_Z17monitorGateKeyPadv+0x6c>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <_Z17monitorGateKeyPadv+0x72>
     95e:	00 00       	nop
		{ //*
			_delay_ms(150); // to avoid the bouncing contact point error
			if(mode == 1){
     960:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <mode>
     964:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <mode+0x1>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	91 05       	cpc	r25, r1
     96c:	19 f5       	brne	.+70     	; 0x9b4 <_Z17monitorGateKeyPadv+0xc8>
				// record the number of tourist below 10 yrs
				touristCars[currentCapacity].touristBelow10 = inputNum;
     96e:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <currentCapacity>
     972:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <currentCapacity+0x1>
     976:	fc 01       	movw	r30, r24
     978:	ee 0f       	add	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	e8 0f       	add	r30, r24
     97e:	f9 1f       	adc	r31, r25
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	ea 56       	subi	r30, 0x6A	; 106
     986:	fc 4f       	sbci	r31, 0xFC	; 252
     988:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <inputNum>
     98c:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <inputNum+0x1>
     990:	91 83       	std	Z+1, r25	; 0x01
     992:	80 83       	st	Z, r24
				inputNum = 0; //resett
     994:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <inputNum+0x1>
     998:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <inputNum>
				displayMessage("TOURISTS > 10yrs", 0);
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	83 ef       	ldi	r24, 0xF3	; 243
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	15 dc       	rcall	.-2006   	; 0x1d0 <_Z14displayMessagePci>
				mode = 2;
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <mode+0x1>
     9ae:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <mode>
     9b2:	ca c0       	rjmp	.+404    	; 0xb48 <_Z17monitorGateKeyPadv+0x25c>
			}
			else if(mode == 2){
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	91 05       	cpc	r25, r1
     9b8:	19 f5       	brne	.+70     	; 0xa00 <_Z17monitorGateKeyPadv+0x114>
				// record the number of tourist below 10 yrs
				touristCars[currentCapacity].touristAbove10 = inputNum;
     9ba:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <currentCapacity>
     9be:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <currentCapacity+0x1>
     9c2:	fc 01       	movw	r30, r24
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	e8 0f       	add	r30, r24
     9ca:	f9 1f       	adc	r31, r25
     9cc:	ee 0f       	add	r30, r30
     9ce:	ff 1f       	adc	r31, r31
     9d0:	ea 56       	subi	r30, 0x6A	; 106
     9d2:	fc 4f       	sbci	r31, 0xFC	; 252
     9d4:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <inputNum>
     9d8:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <inputNum+0x1>
     9dc:	93 83       	std	Z+3, r25	; 0x03
     9de:	82 83       	std	Z+2, r24	; 0x02
				inputNum = 0;
     9e0:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <inputNum+0x1>
     9e4:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <inputNum>
				displayMessage("PLATE NO", 0);
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	ef db       	rcall	.-2082   	; 0x1d0 <_Z14displayMessagePci>
				mode = 3;
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <mode+0x1>
     9fa:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <mode>
     9fe:	a4 c0       	rjmp	.+328    	; 0xb48 <_Z17monitorGateKeyPadv+0x25c>
			}
			else if(mode == 3){
     a00:	83 30       	cpi	r24, 0x03	; 3
     a02:	91 05       	cpc	r25, r1
     a04:	89 f5       	brne	.+98     	; 0xa68 <_Z17monitorGateKeyPadv+0x17c>
				// plate NO
				touristCars[currentCapacity].plateNo = inputNum;
     a06:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <currentCapacity>
     a0a:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <currentCapacity+0x1>
     a0e:	fc 01       	movw	r30, r24
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e8 0f       	add	r30, r24
     a16:	f9 1f       	adc	r31, r25
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	ea 56       	subi	r30, 0x6A	; 106
     a1e:	fc 4f       	sbci	r31, 0xFC	; 252
     a20:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <inputNum>
     a24:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <inputNum+0x1>
     a28:	95 83       	std	Z+5, r25	; 0x05
     a2a:	84 83       	std	Z+4, r24	; 0x04
				inputNum = 0;
     a2c:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <inputNum+0x1>
     a30:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <inputNum>
				displayMessage("TOURISTS RECORDED", 0);
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	8d e0       	ldi	r24, 0x0D	; 13
     a3a:	93 e0       	ldi	r25, 0x03	; 3
     a3c:	c9 db       	rcall	.-2158   	; 0x1d0 <_Z14displayMessagePci>
     a3e:	8b e7       	ldi	r24, 0x7B	; 123
     a40:	92 e9       	ldi	r25, 0x92	; 146
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <_Z17monitorGateKeyPadv+0x156>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <_Z17monitorGateKeyPadv+0x15c>
				_delay_ms(150);
				
				openAndCloseGate();
     a48:	00 00       	nop
     a4a:	14 dc       	rcall	.-2008   	; 0x274 <_Z16openAndCloseGatev>
				
				mode = 0;
     a4c:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <mode+0x1>
     a50:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <mode>
				currentCapacity += 1;
     a54:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <currentCapacity>
     a58:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <currentCapacity+0x1>
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <currentCapacity+0x1>
     a62:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <currentCapacity>
     a66:	70 c0       	rjmp	.+224    	; 0xb48 <_Z17monitorGateKeyPadv+0x25c>
				inputNum = 0; // reset
			}
			else if (mode == 4)
     a68:	84 30       	cpi	r24, 0x04	; 4
     a6a:	91 05       	cpc	r25, r1
     a6c:	59 f5       	brne	.+86     	; 0xac4 <_Z17monitorGateKeyPadv+0x1d8>
			{
				if (inputNum == attendantPin)
     a6e:	20 91 de 03 	lds	r18, 0x03DE	; 0x8003de <inputNum>
     a72:	30 91 df 03 	lds	r19, 0x03DF	; 0x8003df <inputNum+0x1>
     a76:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <attendantPin>
     a7a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <attendantPin+0x1>
     a7e:	28 17       	cp	r18, r24
     a80:	39 07       	cpc	r19, r25
				{
					displayMessage("LOGIN SUCCESS", 0);
     a82:	d1 f4       	brne	.+52     	; 0xab8 <_Z17monitorGateKeyPadv+0x1cc>
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	8f e1       	ldi	r24, 0x1F	; 31
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	a1 db       	rcall	.-2238   	; 0x1d0 <_Z14displayMessagePci>
     a8e:	9f e5       	ldi	r25, 0x5F	; 95
     a90:	2a ee       	ldi	r18, 0xEA	; 234
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	91 50       	subi	r25, 0x01	; 1
     a96:	20 40       	sbci	r18, 0x00	; 0
     a98:	80 40       	sbci	r24, 0x00	; 0
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <_Z17monitorGateKeyPadv+0x1a8>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <_Z17monitorGateKeyPadv+0x1b2>
					_delay_ms(300);
					
					displayMessage("1->ALL CARS,2->TOURISTS", 0);
     a9e:	00 00       	nop
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	8d e2       	ldi	r24, 0x2D	; 45
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	93 db       	rcall	.-2266   	; 0x1d0 <_Z14displayMessagePci>
					mode = 5;
     aaa:	85 e0       	ldi	r24, 0x05	; 5
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <mode+0x1>
     ab2:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <mode>
				}
				else{
					displayMessage("LOGIN FAILED", 0);
     ab6:	48 c0       	rjmp	.+144    	; 0xb48 <_Z17monitorGateKeyPadv+0x25c>
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	85 e4       	ldi	r24, 0x45	; 69
     abe:	93 e0       	ldi	r25, 0x03	; 3
     ac0:	87 db       	rcall	.-2290   	; 0x1d0 <_Z14displayMessagePci>
     ac2:	42 c0       	rjmp	.+132    	; 0xb48 <_Z17monitorGateKeyPadv+0x25c>
					
					inputNum = 0;
			}
			inputNum = 0; // reset
			}
			else if (mode == 5)
     ac4:	05 97       	sbiw	r24, 0x05	; 5
     ac6:	09 f0       	breq	.+2      	; 0xaca <_Z17monitorGateKeyPadv+0x1de>
     ac8:	3f c0       	rjmp	.+126    	; 0xb48 <_Z17monitorGateKeyPadv+0x25c>
			{
				if (inputNum == 1)
     aca:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <inputNum>
     ace:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <inputNum+0x1>
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	91 05       	cpc	r25, r1
				{
					//all cars
					displayNum(currentCapacity, 0);
     ad6:	69 f4       	brne	.+26     	; 0xaf2 <_Z17monitorGateKeyPadv+0x206>
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <currentCapacity>
     ae0:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <currentCapacity+0x1>
					displayMessage("1->ALL CARS,2->TOURISTS", 0);
     ae4:	e9 db       	rcall	.-2094   	; 0x2b8 <_Z10displayNumii>
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	8d e2       	ldi	r24, 0x2D	; 45
     aec:	93 e0       	ldi	r25, 0x03	; 3
     aee:	70 db       	rcall	.-2336   	; 0x1d0 <_Z14displayMessagePci>
     af0:	2b c0       	rjmp	.+86     	; 0xb48 <_Z17monitorGateKeyPadv+0x25c>
					
				}
				else if (inputNum == 2)
     af2:	02 97       	sbiw	r24, 0x02	; 2
     af4:	49 f5       	brne	.+82     	; 0xb48 <_Z17monitorGateKeyPadv+0x25c>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
				{
					// all tourists
					int sum = 0;
					for (int i = 0; i < currentCapacity; i ++)
     afe:	40 91 d8 03 	lds	r20, 0x03D8	; 0x8003d8 <currentCapacity>
     b02:	50 91 d9 03 	lds	r21, 0x03D9	; 0x8003d9 <currentCapacity+0x1>
     b06:	24 17       	cp	r18, r20
     b08:	35 07       	cpc	r19, r21
     b0a:	b4 f4       	brge	.+44     	; 0xb38 <_Z17monitorGateKeyPadv+0x24c>
					{
						sum += (touristCars[i].touristAbove10 + touristCars[1].touristBelow10);
     b0c:	f9 01       	movw	r30, r18
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	e2 0f       	add	r30, r18
     b14:	f3 1f       	adc	r31, r19
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	ea 56       	subi	r30, 0x6A	; 106
     b1c:	fc 4f       	sbci	r31, 0xFC	; 252
     b1e:	62 81       	ldd	r22, Z+2	; 0x02
     b20:	73 81       	ldd	r23, Z+3	; 0x03
     b22:	40 91 9c 03 	lds	r20, 0x039C	; 0x80039c <__data_end+0x6>
     b26:	50 91 9d 03 	lds	r21, 0x039D	; 0x80039d <__data_end+0x7>
     b2a:	46 0f       	add	r20, r22
     b2c:	57 1f       	adc	r21, r23
				}
				else if (inputNum == 2)
				{
					// all tourists
					int sum = 0;
					for (int i = 0; i < currentCapacity; i ++)
     b2e:	84 0f       	add	r24, r20
     b30:	95 1f       	adc	r25, r21
     b32:	2f 5f       	subi	r18, 0xFF	; 255
					{
						sum += (touristCars[i].touristAbove10 + touristCars[1].touristBelow10);
					}
					
					displayNum(sum, 0);
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
     b36:	e3 cf       	rjmp	.-58     	; 0xafe <_Z17monitorGateKeyPadv+0x212>
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
					displayMessage("1->ALL CARS,2->TOURISTS", 0);
     b3c:	bd db       	rcall	.-2182   	; 0x2b8 <_Z10displayNumii>
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	8d e2       	ldi	r24, 0x2D	; 45
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	44 db       	rcall	.-2424   	; 0x1d0 <_Z14displayMessagePci>
					
				}			}
			inputNum = 0; // reset
     b48:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <inputNum+0x1>
     b4c:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <inputNum>
		}
		
		PORTK = 0b11111101;
     b50:	8d ef       	ldi	r24, 0xFD	; 253
     b52:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		
		if ((PINK & 0b00001000) == 0)
     b56:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     b5a:	83 fd       	sbrc	r24, 3
     b5c:	0b c0       	rjmp	.+22     	; 0xb74 <_Z17monitorGateKeyPadv+0x288>
     b5e:	8b e7       	ldi	r24, 0x7B	; 123
     b60:	92 e9       	ldi	r25, 0x92	; 146
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <_Z17monitorGateKeyPadv+0x276>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <_Z17monitorGateKeyPadv+0x27c>
		{ //3
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(2, 0);
     b68:	00 00       	nop
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if ((PINK & 0b00010000) == 0)
     b72:	f8 db       	rcall	.-2064   	; 0x364 <_Z16recordAndDisplayii>
     b74:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     b78:	84 fd       	sbrc	r24, 4
     b7a:	0b c0       	rjmp	.+22     	; 0xb92 <_Z17monitorGateKeyPadv+0x2a6>
     b7c:	8b e7       	ldi	r24, 0x7B	; 123
     b7e:	92 e9       	ldi	r25, 0x92	; 146
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <_Z17monitorGateKeyPadv+0x294>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <_Z17monitorGateKeyPadv+0x29a>
		{ //5
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(5, 0);
     b86:	00 00       	nop
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	85 e0       	ldi	r24, 0x05	; 5
     b8e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if ((PINK & 0b00100000) == 0)
     b90:	e9 db       	rcall	.-2094   	; 0x364 <_Z16recordAndDisplayii>
     b92:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     b96:	85 fd       	sbrc	r24, 5
     b98:	0b c0       	rjmp	.+22     	; 0xbb0 <_Z17monitorGateKeyPadv+0x2c4>
     b9a:	8b e7       	ldi	r24, 0x7B	; 123
     b9c:	92 e9       	ldi	r25, 0x92	; 146
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <_Z17monitorGateKeyPadv+0x2b2>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <_Z17monitorGateKeyPadv+0x2b8>
		{ //8
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(8, 0);
     ba4:	00 00       	nop
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	88 e0       	ldi	r24, 0x08	; 8
     bac:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if ((PINK & 0b01000000) == 0)
     bae:	da db       	rcall	.-2124   	; 0x364 <_Z16recordAndDisplayii>
     bb0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     bb4:	86 fd       	sbrc	r24, 6
     bb6:	0b c0       	rjmp	.+22     	; 0xbce <_Z17monitorGateKeyPadv+0x2e2>
     bb8:	8b e7       	ldi	r24, 0x7B	; 123
     bba:	92 e9       	ldi	r25, 0x92	; 146
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <_Z17monitorGateKeyPadv+0x2d0>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <_Z17monitorGateKeyPadv+0x2d6>
		{ //0
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(0, 0);
     bc2:	00 00       	nop
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
			
		}
		
		PORTK = 0b11111110;
     bcc:	cb db       	rcall	.-2154   	; 0x364 <_Z16recordAndDisplayii>
     bce:	8e ef       	ldi	r24, 0xFE	; 254
     bd0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		
		if ((PINK & 0b00001000) == 0)
     bd4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     bd8:	83 fd       	sbrc	r24, 3
     bda:	0b c0       	rjmp	.+22     	; 0xbf2 <_Z17monitorGateKeyPadv+0x306>
     bdc:	8b e7       	ldi	r24, 0x7B	; 123
     bde:	92 e9       	ldi	r25, 0x92	; 146
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <_Z17monitorGateKeyPadv+0x2f4>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <_Z17monitorGateKeyPadv+0x2fa>
		{ //3
			_delay_ms(150);  // to avoid the bouncing contact point error
			recordAndDisplay(3, 0);
     be6:	00 00       	nop
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if ((PINK & 0b00010000) == 0)
     bf0:	b9 db       	rcall	.-2190   	; 0x364 <_Z16recordAndDisplayii>
     bf2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     bf6:	84 fd       	sbrc	r24, 4
     bf8:	0b c0       	rjmp	.+22     	; 0xc10 <_Z17monitorGateKeyPadv+0x324>
     bfa:	8b e7       	ldi	r24, 0x7B	; 123
     bfc:	92 e9       	ldi	r25, 0x92	; 146
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <_Z17monitorGateKeyPadv+0x312>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <_Z17monitorGateKeyPadv+0x318>
		{ //5
			_delay_ms(150); // to avoid the bouncing contact point error
			recordAndDisplay(6, 0);
     c04:	00 00       	nop
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if ((PINK & 0b00100000) == 0)
     c0e:	aa db       	rcall	.-2220   	; 0x364 <_Z16recordAndDisplayii>
     c10:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     c14:	85 fd       	sbrc	r24, 5
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <_Z17monitorGateKeyPadv+0x342>
     c18:	8b e7       	ldi	r24, 0x7B	; 123
     c1a:	92 e9       	ldi	r25, 0x92	; 146
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <_Z17monitorGateKeyPadv+0x330>
		{ //8
			_delay_ms(150);
			recordAndDisplay(9, 0);
     c20:	00 c0       	rjmp	.+0      	; 0xc22 <_Z17monitorGateKeyPadv+0x336>
     c22:	00 00       	nop
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	89 e0       	ldi	r24, 0x09	; 9
     c2a:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		if ((PINK & 0b01000000) == 0)
     c2c:	9b db       	rcall	.-2250   	; 0x364 <_Z16recordAndDisplayii>
     c2e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     c32:	86 fd       	sbrc	r24, 6
     c34:	1f c0       	rjmp	.+62     	; 0xc74 <_Z17monitorGateKeyPadv+0x388>
     c36:	8b e7       	ldi	r24, 0x7B	; 123
     c38:	92 e9       	ldi	r25, 0x92	; 146
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <_Z17monitorGateKeyPadv+0x34e>
		{ //0
			_delay_ms(150);  // to avoid the bouncing contact point error
			displayMessage("ATTENDANT MODE", 0);
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <_Z17monitorGateKeyPadv+0x354>
     c40:	00 00       	nop
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	82 e5       	ldi	r24, 0x52	; 82
     c48:	93 e0       	ldi	r25, 0x03	; 3
     c4a:	c2 da       	rcall	.-2684   	; 0x1d0 <_Z14displayMessagePci>
     c4c:	9f e5       	ldi	r25, 0x5F	; 95
     c4e:	2a ee       	ldi	r18, 0xEA	; 234
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	91 50       	subi	r25, 0x01	; 1
     c54:	20 40       	sbci	r18, 0x00	; 0
     c56:	80 40       	sbci	r24, 0x00	; 0
     c58:	e1 f7       	brne	.-8      	; 0xc52 <_Z17monitorGateKeyPadv+0x366>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <_Z17monitorGateKeyPadv+0x370>
			_delay_ms(300);
			
			displayMessage("ENTER PIN", 0);
     c5c:	00 00       	nop
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	81 e6       	ldi	r24, 0x61	; 97
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	b4 da       	rcall	.-2712   	; 0x1d0 <_Z14displayMessagePci>
			mode = 4;
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <mode+0x1>
     c70:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <mode>
     c74:	08 95       	ret

00000c76 <main>:
int main(void)
{
	//initiate the tourist cars
	
    /* Replace with your application code */
	EIMSK |= (1 << INT0); //register the int 0 pin
     c76:	8d b3       	in	r24, 0x1d	; 29
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	8d bb       	out	0x1d, r24	; 29
	DDRJ = 0xff;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
	DDRD = 0x00;
     c82:	1a b8       	out	0x0a, r1	; 10
	DDRH = 0xff;
     c84:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
	DDRG = 0xff;
     c88:	83 bb       	out	0x13, r24	; 19
	DDRF = 0xff;
     c8a:	80 bb       	out	0x10, r24	; 16
	DDRC = 0xff;
     c8c:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xff;
     c8e:	84 b9       	out	0x04, r24	; 4
	DDRK = 0b00000111;
     c90:	87 e0       	ldi	r24, 0x07	; 7
     c92:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRE = 0b00000111;
     c96:	8d b9       	out	0x0d, r24	; 13
	
	sei();
     c98:	78 94       	sei
	
	PORTG &= ~(1 << PG3); //command mode
     c9a:	84 b3       	in	r24, 0x14	; 20
     c9c:	87 7f       	andi	r24, 0xF7	; 247
     c9e:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << PG4); //write mode
     ca0:	84 b3       	in	r24, 0x14	; 20
     ca2:	8f 7e       	andi	r24, 0xEF	; 239
     ca4:	84 bb       	out	0x14, r24	; 20
	latch(0);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	6a da       	rcall	.-2860   	; 0x180 <_Z5latchi>
	
	
	PORTH = 0x0f; //display
     cac:	cf e0       	ldi	r28, 0x0F	; 15
     cae:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
	latch(0);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	64 da       	rcall	.-2872   	; 0x180 <_Z5latchi>
	
	
	PORTC &= ~(1 << PC3); //command mode fridge
     cb8:	88 b1       	in	r24, 0x08	; 8
     cba:	87 7f       	andi	r24, 0xF7	; 247
     cbc:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC2); //write mode fridge
     cbe:	88 b1       	in	r24, 0x08	; 8
     cc0:	8b 7f       	andi	r24, 0xFB	; 251
     cc2:	88 b9       	out	0x08, r24	; 8
	latch(1);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	5b da       	rcall	.-2890   	; 0x180 <_Z5latchi>
	
	inputNum = 0;
     cca:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <inputNum+0x1>
     cce:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <inputNum>
	
	PORTB = 0x0f;
	latch(1);
     cd2:	c5 b9       	out	0x05, r28	; 5
     cd4:	81 e0       	ldi	r24, 0x01	; 1
	
	displayDefaultFridgeMessage();
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	53 da       	rcall	.-2906   	; 0x180 <_Z5latchi>

	
    while (1) {
		//PORTC = 0b00100000;
		
		monitorGateKeyPad();
     cda:	78 db       	rcall	.-2320   	; 0x3cc <_Z27displayDefaultFridgeMessagev>
     cdc:	07 de       	rcall	.-1010   	; 0x8ec <_Z17monitorGateKeyPadv>
		monitorFridgeKeyPad();
     cde:	e6 db       	rcall	.-2100   	; 0x4ac <_Z19monitorFridgeKeyPadv>
     ce0:	fd cf       	rjmp	.-6      	; 0xcdc <main+0x66>

00000ce2 <__vector_1>:
     ce2:	1f 92       	push	r1
			mode = 4;
			
		}
}

ISR(INT0_vect){
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	0b b6       	in	r0, 0x3b	; 59
     cee:	0f 92       	push	r0
     cf0:	2f 93       	push	r18
     cf2:	3f 93       	push	r19
     cf4:	4f 93       	push	r20
     cf6:	5f 93       	push	r21
     cf8:	6f 93       	push	r22
     cfa:	7f 93       	push	r23
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
	PORTJ = 0xff;
     d0c:	c5 e0       	ldi	r28, 0x05	; 5
     d0e:	d1 e0       	ldi	r29, 0x01	; 1
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	88 83       	st	Y, r24
	displayMessage("Car at Gate", 0);
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	8b e6       	ldi	r24, 0x6B	; 107
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	59 da       	rcall	.-2894   	; 0x1d0 <_Z14displayMessagePci>
     d1e:	2f e7       	ldi	r18, 0x7F	; 127
     d20:	8a e1       	ldi	r24, 0x1A	; 26
     d22:	96 e0       	ldi	r25, 0x06	; 6
     d24:	21 50       	subi	r18, 0x01	; 1
     d26:	80 40       	sbci	r24, 0x00	; 0
     d28:	90 40       	sbci	r25, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <__vector_1+0x42>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <__vector_1+0x4c>
     d2e:	00 00       	nop
	
	_delay_ms(2000);
	
	PORTJ = 0x00;
     d30:	18 82       	st	Y, r1
	

	displayMessage("register mode", 0);
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	87 e7       	ldi	r24, 0x77	; 119
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	4a da       	rcall	.-2924   	; 0x1d0 <_Z14displayMessagePci>
	
	//modes 1-for registering tourists < 10, 2-registering tourists >10
	mode = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <mode+0x1>
     d44:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <mode>
     d48:	2f e7       	ldi	r18, 0x7F	; 127
     d4a:	8a e1       	ldi	r24, 0x1A	; 26
     d4c:	96 e0       	ldi	r25, 0x06	; 6
     d4e:	21 50       	subi	r18, 0x01	; 1
     d50:	80 40       	sbci	r24, 0x00	; 0
     d52:	90 40       	sbci	r25, 0x00	; 0
     d54:	e1 f7       	brne	.-8      	; 0xd4e <__vector_1+0x6c>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <__vector_1+0x76>
     d58:	00 00       	nop
	
	
	_delay_ms(2000);
	
	displayMessage("TOURISTS <10yrs", 0);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	85 e8       	ldi	r24, 0x85	; 133
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	36 da       	rcall	.-2964   	; 0x1d0 <_Z14displayMessagePci>
	inputNum = 0;
     d64:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <inputNum+0x1>
     d68:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <inputNum>

}
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0b be       	out	0x3b, r0	; 59
     d8c:	0f 90       	pop	r0
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <__subsf3>:
     d96:	50 58       	subi	r21, 0x80	; 128

00000d98 <__addsf3>:
     d98:	bb 27       	eor	r27, r27
     d9a:	aa 27       	eor	r26, r26
     d9c:	0e d0       	rcall	.+28     	; 0xdba <__addsf3x>
     d9e:	21 c1       	rjmp	.+578    	; 0xfe2 <__fp_round>
     da0:	12 d1       	rcall	.+548    	; 0xfc6 <__fp_pscA>
     da2:	30 f0       	brcs	.+12     	; 0xdb0 <__addsf3+0x18>
     da4:	17 d1       	rcall	.+558    	; 0xfd4 <__fp_pscB>
     da6:	20 f0       	brcs	.+8      	; 0xdb0 <__addsf3+0x18>
     da8:	31 f4       	brne	.+12     	; 0xdb6 <__addsf3+0x1e>
     daa:	9f 3f       	cpi	r25, 0xFF	; 255
     dac:	11 f4       	brne	.+4      	; 0xdb2 <__addsf3+0x1a>
     dae:	1e f4       	brtc	.+6      	; 0xdb6 <__addsf3+0x1e>
     db0:	07 c1       	rjmp	.+526    	; 0xfc0 <__fp_nan>
     db2:	0e f4       	brtc	.+2      	; 0xdb6 <__addsf3+0x1e>
     db4:	e0 95       	com	r30
     db6:	e7 fb       	bst	r30, 7
     db8:	d4 c0       	rjmp	.+424    	; 0xf62 <__fp_inf>

00000dba <__addsf3x>:
     dba:	e9 2f       	mov	r30, r25
     dbc:	23 d1       	rcall	.+582    	; 0x1004 <__fp_split3>
     dbe:	80 f3       	brcs	.-32     	; 0xda0 <__addsf3+0x8>
     dc0:	ba 17       	cp	r27, r26
     dc2:	62 07       	cpc	r22, r18
     dc4:	73 07       	cpc	r23, r19
     dc6:	84 07       	cpc	r24, r20
     dc8:	95 07       	cpc	r25, r21
     dca:	18 f0       	brcs	.+6      	; 0xdd2 <__addsf3x+0x18>
     dcc:	71 f4       	brne	.+28     	; 0xdea <__addsf3x+0x30>
     dce:	9e f5       	brtc	.+102    	; 0xe36 <__addsf3x+0x7c>
     dd0:	52 c1       	rjmp	.+676    	; 0x1076 <__fp_zero>
     dd2:	0e f4       	brtc	.+2      	; 0xdd6 <__addsf3x+0x1c>
     dd4:	e0 95       	com	r30
     dd6:	0b 2e       	mov	r0, r27
     dd8:	ba 2f       	mov	r27, r26
     dda:	a0 2d       	mov	r26, r0
     ddc:	0b 01       	movw	r0, r22
     dde:	b9 01       	movw	r22, r18
     de0:	90 01       	movw	r18, r0
     de2:	0c 01       	movw	r0, r24
     de4:	ca 01       	movw	r24, r20
     de6:	a0 01       	movw	r20, r0
     de8:	11 24       	eor	r1, r1
     dea:	ff 27       	eor	r31, r31
     dec:	59 1b       	sub	r21, r25
     dee:	99 f0       	breq	.+38     	; 0xe16 <__addsf3x+0x5c>
     df0:	59 3f       	cpi	r21, 0xF9	; 249
     df2:	50 f4       	brcc	.+20     	; 0xe08 <__addsf3x+0x4e>
     df4:	50 3e       	cpi	r21, 0xE0	; 224
     df6:	68 f1       	brcs	.+90     	; 0xe52 <__addsf3x+0x98>
     df8:	1a 16       	cp	r1, r26
     dfa:	f0 40       	sbci	r31, 0x00	; 0
     dfc:	a2 2f       	mov	r26, r18
     dfe:	23 2f       	mov	r18, r19
     e00:	34 2f       	mov	r19, r20
     e02:	44 27       	eor	r20, r20
     e04:	58 5f       	subi	r21, 0xF8	; 248
     e06:	f3 cf       	rjmp	.-26     	; 0xdee <__addsf3x+0x34>
     e08:	46 95       	lsr	r20
     e0a:	37 95       	ror	r19
     e0c:	27 95       	ror	r18
     e0e:	a7 95       	ror	r26
     e10:	f0 40       	sbci	r31, 0x00	; 0
     e12:	53 95       	inc	r21
     e14:	c9 f7       	brne	.-14     	; 0xe08 <__addsf3x+0x4e>
     e16:	7e f4       	brtc	.+30     	; 0xe36 <__addsf3x+0x7c>
     e18:	1f 16       	cp	r1, r31
     e1a:	ba 0b       	sbc	r27, r26
     e1c:	62 0b       	sbc	r22, r18
     e1e:	73 0b       	sbc	r23, r19
     e20:	84 0b       	sbc	r24, r20
     e22:	ba f0       	brmi	.+46     	; 0xe52 <__addsf3x+0x98>
     e24:	91 50       	subi	r25, 0x01	; 1
     e26:	a1 f0       	breq	.+40     	; 0xe50 <__addsf3x+0x96>
     e28:	ff 0f       	add	r31, r31
     e2a:	bb 1f       	adc	r27, r27
     e2c:	66 1f       	adc	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	88 1f       	adc	r24, r24
     e32:	c2 f7       	brpl	.-16     	; 0xe24 <__addsf3x+0x6a>
     e34:	0e c0       	rjmp	.+28     	; 0xe52 <__addsf3x+0x98>
     e36:	ba 0f       	add	r27, r26
     e38:	62 1f       	adc	r22, r18
     e3a:	73 1f       	adc	r23, r19
     e3c:	84 1f       	adc	r24, r20
     e3e:	48 f4       	brcc	.+18     	; 0xe52 <__addsf3x+0x98>
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f7 95       	ror	r31
     e4a:	9e 3f       	cpi	r25, 0xFE	; 254
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <__addsf3x+0x96>
     e4e:	b3 cf       	rjmp	.-154    	; 0xdb6 <__addsf3+0x1e>
     e50:	93 95       	inc	r25
     e52:	88 0f       	add	r24, r24
     e54:	08 f0       	brcs	.+2      	; 0xe58 <__addsf3x+0x9e>
     e56:	99 27       	eor	r25, r25
     e58:	ee 0f       	add	r30, r30
     e5a:	97 95       	ror	r25
     e5c:	87 95       	ror	r24
     e5e:	08 95       	ret

00000e60 <ceil>:
     e60:	f3 d0       	rcall	.+486    	; 0x1048 <__fp_trunc>
     e62:	80 f0       	brcs	.+32     	; 0xe84 <ceil+0x24>
     e64:	9f 37       	cpi	r25, 0x7F	; 127
     e66:	40 f4       	brcc	.+16     	; 0xe78 <ceil+0x18>
     e68:	91 11       	cpse	r25, r1
     e6a:	0e f4       	brtc	.+2      	; 0xe6e <ceil+0xe>
     e6c:	05 c1       	rjmp	.+522    	; 0x1078 <__fp_szero>
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	80 e8       	ldi	r24, 0x80	; 128
     e74:	9f e3       	ldi	r25, 0x3F	; 63
     e76:	08 95       	ret
     e78:	26 f0       	brts	.+8      	; 0xe82 <ceil+0x22>
     e7a:	1b 16       	cp	r1, r27
     e7c:	61 1d       	adc	r22, r1
     e7e:	71 1d       	adc	r23, r1
     e80:	81 1d       	adc	r24, r1
     e82:	75 c0       	rjmp	.+234    	; 0xf6e <__fp_mintl>
     e84:	8f c0       	rjmp	.+286    	; 0xfa4 <__fp_mpack>

00000e86 <__fixsfsi>:
     e86:	04 d0       	rcall	.+8      	; 0xe90 <__fixunssfsi>
     e88:	68 94       	set
     e8a:	b1 11       	cpse	r27, r1
     e8c:	f5 c0       	rjmp	.+490    	; 0x1078 <__fp_szero>
     e8e:	08 95       	ret

00000e90 <__fixunssfsi>:
     e90:	c1 d0       	rcall	.+386    	; 0x1014 <__fp_splitA>
     e92:	88 f0       	brcs	.+34     	; 0xeb6 <__fixunssfsi+0x26>
     e94:	9f 57       	subi	r25, 0x7F	; 127
     e96:	90 f0       	brcs	.+36     	; 0xebc <__fixunssfsi+0x2c>
     e98:	b9 2f       	mov	r27, r25
     e9a:	99 27       	eor	r25, r25
     e9c:	b7 51       	subi	r27, 0x17	; 23
     e9e:	a0 f0       	brcs	.+40     	; 0xec8 <__fixunssfsi+0x38>
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <__fixunssfsi+0x46>
     ea2:	66 0f       	add	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	1a f0       	brmi	.+6      	; 0xeb2 <__fixunssfsi+0x22>
     eac:	ba 95       	dec	r27
     eae:	c9 f7       	brne	.-14     	; 0xea2 <__fixunssfsi+0x12>
     eb0:	12 c0       	rjmp	.+36     	; 0xed6 <__fixunssfsi+0x46>
     eb2:	b1 30       	cpi	r27, 0x01	; 1
     eb4:	81 f0       	breq	.+32     	; 0xed6 <__fixunssfsi+0x46>
     eb6:	df d0       	rcall	.+446    	; 0x1076 <__fp_zero>
     eb8:	b1 e0       	ldi	r27, 0x01	; 1
     eba:	08 95       	ret
     ebc:	dc c0       	rjmp	.+440    	; 0x1076 <__fp_zero>
     ebe:	67 2f       	mov	r22, r23
     ec0:	78 2f       	mov	r23, r24
     ec2:	88 27       	eor	r24, r24
     ec4:	b8 5f       	subi	r27, 0xF8	; 248
     ec6:	39 f0       	breq	.+14     	; 0xed6 <__fixunssfsi+0x46>
     ec8:	b9 3f       	cpi	r27, 0xF9	; 249
     eca:	cc f3       	brlt	.-14     	; 0xebe <__fixunssfsi+0x2e>
     ecc:	86 95       	lsr	r24
     ece:	77 95       	ror	r23
     ed0:	67 95       	ror	r22
     ed2:	b3 95       	inc	r27
     ed4:	d9 f7       	brne	.-10     	; 0xecc <__fixunssfsi+0x3c>
     ed6:	3e f4       	brtc	.+14     	; 0xee6 <__fixunssfsi+0x56>
     ed8:	90 95       	com	r25
     eda:	80 95       	com	r24
     edc:	70 95       	com	r23
     ede:	61 95       	neg	r22
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	8f 4f       	sbci	r24, 0xFF	; 255
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	08 95       	ret

00000ee8 <__floatunsisf>:
     ee8:	e8 94       	clt
     eea:	09 c0       	rjmp	.+18     	; 0xefe <__floatsisf+0x12>

00000eec <__floatsisf>:
     eec:	97 fb       	bst	r25, 7
     eee:	3e f4       	brtc	.+14     	; 0xefe <__floatsisf+0x12>
     ef0:	90 95       	com	r25
     ef2:	80 95       	com	r24
     ef4:	70 95       	com	r23
     ef6:	61 95       	neg	r22
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	99 23       	and	r25, r25
     f00:	a9 f0       	breq	.+42     	; 0xf2c <__floatsisf+0x40>
     f02:	f9 2f       	mov	r31, r25
     f04:	96 e9       	ldi	r25, 0x96	; 150
     f06:	bb 27       	eor	r27, r27
     f08:	93 95       	inc	r25
     f0a:	f6 95       	lsr	r31
     f0c:	87 95       	ror	r24
     f0e:	77 95       	ror	r23
     f10:	67 95       	ror	r22
     f12:	b7 95       	ror	r27
     f14:	f1 11       	cpse	r31, r1
     f16:	f8 cf       	rjmp	.-16     	; 0xf08 <__floatsisf+0x1c>
     f18:	fa f4       	brpl	.+62     	; 0xf58 <__floatsisf+0x6c>
     f1a:	bb 0f       	add	r27, r27
     f1c:	11 f4       	brne	.+4      	; 0xf22 <__floatsisf+0x36>
     f1e:	60 ff       	sbrs	r22, 0
     f20:	1b c0       	rjmp	.+54     	; 0xf58 <__floatsisf+0x6c>
     f22:	6f 5f       	subi	r22, 0xFF	; 255
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	8f 4f       	sbci	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	16 c0       	rjmp	.+44     	; 0xf58 <__floatsisf+0x6c>
     f2c:	88 23       	and	r24, r24
     f2e:	11 f0       	breq	.+4      	; 0xf34 <__floatsisf+0x48>
     f30:	96 e9       	ldi	r25, 0x96	; 150
     f32:	11 c0       	rjmp	.+34     	; 0xf56 <__floatsisf+0x6a>
     f34:	77 23       	and	r23, r23
     f36:	21 f0       	breq	.+8      	; 0xf40 <__floatsisf+0x54>
     f38:	9e e8       	ldi	r25, 0x8E	; 142
     f3a:	87 2f       	mov	r24, r23
     f3c:	76 2f       	mov	r23, r22
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <__floatsisf+0x5e>
     f40:	66 23       	and	r22, r22
     f42:	71 f0       	breq	.+28     	; 0xf60 <__floatsisf+0x74>
     f44:	96 e8       	ldi	r25, 0x86	; 134
     f46:	86 2f       	mov	r24, r22
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	2a f0       	brmi	.+10     	; 0xf58 <__floatsisf+0x6c>
     f4e:	9a 95       	dec	r25
     f50:	66 0f       	add	r22, r22
     f52:	77 1f       	adc	r23, r23
     f54:	88 1f       	adc	r24, r24
     f56:	da f7       	brpl	.-10     	; 0xf4e <__floatsisf+0x62>
     f58:	88 0f       	add	r24, r24
     f5a:	96 95       	lsr	r25
     f5c:	87 95       	ror	r24
     f5e:	97 f9       	bld	r25, 7
     f60:	08 95       	ret

00000f62 <__fp_inf>:
     f62:	97 f9       	bld	r25, 7
     f64:	9f 67       	ori	r25, 0x7F	; 127
     f66:	80 e8       	ldi	r24, 0x80	; 128
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	08 95       	ret

00000f6e <__fp_mintl>:
     f6e:	88 23       	and	r24, r24
     f70:	71 f4       	brne	.+28     	; 0xf8e <__fp_mintl+0x20>
     f72:	77 23       	and	r23, r23
     f74:	21 f0       	breq	.+8      	; 0xf7e <__fp_mintl+0x10>
     f76:	98 50       	subi	r25, 0x08	; 8
     f78:	87 2b       	or	r24, r23
     f7a:	76 2f       	mov	r23, r22
     f7c:	07 c0       	rjmp	.+14     	; 0xf8c <__fp_mintl+0x1e>
     f7e:	66 23       	and	r22, r22
     f80:	11 f4       	brne	.+4      	; 0xf86 <__fp_mintl+0x18>
     f82:	99 27       	eor	r25, r25
     f84:	0d c0       	rjmp	.+26     	; 0xfa0 <__fp_mintl+0x32>
     f86:	90 51       	subi	r25, 0x10	; 16
     f88:	86 2b       	or	r24, r22
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	2a f0       	brmi	.+10     	; 0xf9a <__fp_mintl+0x2c>
     f90:	9a 95       	dec	r25
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	da f7       	brpl	.-10     	; 0xf90 <__fp_mintl+0x22>
     f9a:	88 0f       	add	r24, r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <__fp_mpack>:
     fa4:	9f 3f       	cpi	r25, 0xFF	; 255
     fa6:	31 f0       	breq	.+12     	; 0xfb4 <__fp_mpack_finite+0xc>

00000fa8 <__fp_mpack_finite>:
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	20 f4       	brcc	.+8      	; 0xfb4 <__fp_mpack_finite+0xc>
     fac:	87 95       	ror	r24
     fae:	77 95       	ror	r23
     fb0:	67 95       	ror	r22
     fb2:	b7 95       	ror	r27
     fb4:	88 0f       	add	r24, r24
     fb6:	91 1d       	adc	r25, r1
     fb8:	96 95       	lsr	r25
     fba:	87 95       	ror	r24
     fbc:	97 f9       	bld	r25, 7
     fbe:	08 95       	ret

00000fc0 <__fp_nan>:
     fc0:	9f ef       	ldi	r25, 0xFF	; 255
     fc2:	80 ec       	ldi	r24, 0xC0	; 192
     fc4:	08 95       	ret

00000fc6 <__fp_pscA>:
     fc6:	00 24       	eor	r0, r0
     fc8:	0a 94       	dec	r0
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	18 06       	cpc	r1, r24
     fd0:	09 06       	cpc	r0, r25
     fd2:	08 95       	ret

00000fd4 <__fp_pscB>:
     fd4:	00 24       	eor	r0, r0
     fd6:	0a 94       	dec	r0
     fd8:	12 16       	cp	r1, r18
     fda:	13 06       	cpc	r1, r19
     fdc:	14 06       	cpc	r1, r20
     fde:	05 06       	cpc	r0, r21
     fe0:	08 95       	ret

00000fe2 <__fp_round>:
     fe2:	09 2e       	mov	r0, r25
     fe4:	03 94       	inc	r0
     fe6:	00 0c       	add	r0, r0
     fe8:	11 f4       	brne	.+4      	; 0xfee <__fp_round+0xc>
     fea:	88 23       	and	r24, r24
     fec:	52 f0       	brmi	.+20     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     fee:	bb 0f       	add	r27, r27
     ff0:	40 f4       	brcc	.+16     	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ff2:	bf 2b       	or	r27, r31
     ff4:	11 f4       	brne	.+4      	; 0xffa <__fp_round+0x18>
     ff6:	60 ff       	sbrs	r22, 0
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	08 95       	ret

00001004 <__fp_split3>:
    1004:	57 fd       	sbrc	r21, 7
    1006:	90 58       	subi	r25, 0x80	; 128
    1008:	44 0f       	add	r20, r20
    100a:	55 1f       	adc	r21, r21
    100c:	59 f0       	breq	.+22     	; 0x1024 <__fp_splitA+0x10>
    100e:	5f 3f       	cpi	r21, 0xFF	; 255
    1010:	71 f0       	breq	.+28     	; 0x102e <__fp_splitA+0x1a>
    1012:	47 95       	ror	r20

00001014 <__fp_splitA>:
    1014:	88 0f       	add	r24, r24
    1016:	97 fb       	bst	r25, 7
    1018:	99 1f       	adc	r25, r25
    101a:	61 f0       	breq	.+24     	; 0x1034 <__fp_splitA+0x20>
    101c:	9f 3f       	cpi	r25, 0xFF	; 255
    101e:	79 f0       	breq	.+30     	; 0x103e <__fp_splitA+0x2a>
    1020:	87 95       	ror	r24
    1022:	08 95       	ret
    1024:	12 16       	cp	r1, r18
    1026:	13 06       	cpc	r1, r19
    1028:	14 06       	cpc	r1, r20
    102a:	55 1f       	adc	r21, r21
    102c:	f2 cf       	rjmp	.-28     	; 0x1012 <__fp_split3+0xe>
    102e:	46 95       	lsr	r20
    1030:	f1 df       	rcall	.-30     	; 0x1014 <__fp_splitA>
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <__fp_splitA+0x30>
    1034:	16 16       	cp	r1, r22
    1036:	17 06       	cpc	r1, r23
    1038:	18 06       	cpc	r1, r24
    103a:	99 1f       	adc	r25, r25
    103c:	f1 cf       	rjmp	.-30     	; 0x1020 <__fp_splitA+0xc>
    103e:	86 95       	lsr	r24
    1040:	71 05       	cpc	r23, r1
    1042:	61 05       	cpc	r22, r1
    1044:	08 94       	sec
    1046:	08 95       	ret

00001048 <__fp_trunc>:
    1048:	e5 df       	rcall	.-54     	; 0x1014 <__fp_splitA>
    104a:	a0 f0       	brcs	.+40     	; 0x1074 <__fp_trunc+0x2c>
    104c:	be e7       	ldi	r27, 0x7E	; 126
    104e:	b9 17       	cp	r27, r25
    1050:	88 f4       	brcc	.+34     	; 0x1074 <__fp_trunc+0x2c>
    1052:	bb 27       	eor	r27, r27
    1054:	9f 38       	cpi	r25, 0x8F	; 143
    1056:	60 f4       	brcc	.+24     	; 0x1070 <__fp_trunc+0x28>
    1058:	16 16       	cp	r1, r22
    105a:	b1 1d       	adc	r27, r1
    105c:	67 2f       	mov	r22, r23
    105e:	78 2f       	mov	r23, r24
    1060:	88 27       	eor	r24, r24
    1062:	98 5f       	subi	r25, 0xF8	; 248
    1064:	f7 cf       	rjmp	.-18     	; 0x1054 <__fp_trunc+0xc>
    1066:	86 95       	lsr	r24
    1068:	77 95       	ror	r23
    106a:	67 95       	ror	r22
    106c:	b1 1d       	adc	r27, r1
    106e:	93 95       	inc	r25
    1070:	96 39       	cpi	r25, 0x96	; 150
    1072:	c8 f3       	brcs	.-14     	; 0x1066 <__fp_trunc+0x1e>
    1074:	08 95       	ret

00001076 <__fp_zero>:
    1076:	e8 94       	clt

00001078 <__fp_szero>:
    1078:	bb 27       	eor	r27, r27
    107a:	66 27       	eor	r22, r22
    107c:	77 27       	eor	r23, r23
    107e:	cb 01       	movw	r24, r22
    1080:	97 f9       	bld	r25, 7
    1082:	08 95       	ret

00001084 <log10>:
    1084:	0a d0       	rcall	.+20     	; 0x109a <log>
    1086:	29 ed       	ldi	r18, 0xD9	; 217
    1088:	3b e5       	ldi	r19, 0x5B	; 91
    108a:	4e ed       	ldi	r20, 0xDE	; 222
    108c:	5e e3       	ldi	r21, 0x3E	; 62
    108e:	45 c0       	rjmp	.+138    	; 0x111a <__mulsf3>
    1090:	0e f0       	brts	.+2      	; 0x1094 <log10+0x10>
    1092:	88 cf       	rjmp	.-240    	; 0xfa4 <__fp_mpack>
    1094:	95 cf       	rjmp	.-214    	; 0xfc0 <__fp_nan>
    1096:	68 94       	set
    1098:	64 cf       	rjmp	.-312    	; 0xf62 <__fp_inf>

0000109a <log>:
    109a:	bc df       	rcall	.-136    	; 0x1014 <__fp_splitA>
    109c:	c8 f3       	brcs	.-14     	; 0x1090 <log10+0xc>
    109e:	99 23       	and	r25, r25
    10a0:	d1 f3       	breq	.-12     	; 0x1096 <log10+0x12>
    10a2:	c6 f3       	brts	.-16     	; 0x1094 <log10+0x10>
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	1f 93       	push	r17
    10aa:	0f 93       	push	r16
    10ac:	ff 92       	push	r15
    10ae:	c9 2f       	mov	r28, r25
    10b0:	dd 27       	eor	r29, r29
    10b2:	88 23       	and	r24, r24
    10b4:	2a f0       	brmi	.+10     	; 0x10c0 <log+0x26>
    10b6:	21 97       	sbiw	r28, 0x01	; 1
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	da f7       	brpl	.-10     	; 0x10b6 <log+0x1c>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f eb       	ldi	r21, 0xBF	; 191
    10c8:	9f e3       	ldi	r25, 0x3F	; 63
    10ca:	88 39       	cpi	r24, 0x98	; 152
    10cc:	20 f0       	brcs	.+8      	; 0x10d6 <log+0x3c>
    10ce:	80 3e       	cpi	r24, 0xE0	; 224
    10d0:	30 f0       	brcs	.+12     	; 0x10de <log+0x44>
    10d2:	21 96       	adiw	r28, 0x01	; 1
    10d4:	8f 77       	andi	r24, 0x7F	; 127
    10d6:	60 de       	rcall	.-832    	; 0xd98 <__addsf3>
    10d8:	e4 ee       	ldi	r30, 0xE4	; 228
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <log+0x4a>
    10de:	5c de       	rcall	.-840    	; 0xd98 <__addsf3>
    10e0:	e1 e1       	ldi	r30, 0x11	; 17
    10e2:	f1 e0       	ldi	r31, 0x01	; 1
    10e4:	7d d0       	rcall	.+250    	; 0x11e0 <__fp_powser>
    10e6:	8b 01       	movw	r16, r22
    10e8:	be 01       	movw	r22, r28
    10ea:	ec 01       	movw	r28, r24
    10ec:	fb 2e       	mov	r15, r27
    10ee:	6f 57       	subi	r22, 0x7F	; 127
    10f0:	71 09       	sbc	r23, r1
    10f2:	75 95       	asr	r23
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 0b       	sbc	r24, r24
    10f8:	99 0b       	sbc	r25, r25
    10fa:	f8 de       	rcall	.-528    	; 0xeec <__floatsisf>
    10fc:	28 e1       	ldi	r18, 0x18	; 24
    10fe:	32 e7       	ldi	r19, 0x72	; 114
    1100:	41 e3       	ldi	r20, 0x31	; 49
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	16 d0       	rcall	.+44     	; 0x1132 <__mulsf3x>
    1106:	af 2d       	mov	r26, r15
    1108:	98 01       	movw	r18, r16
    110a:	ae 01       	movw	r20, r28
    110c:	ff 90       	pop	r15
    110e:	0f 91       	pop	r16
    1110:	1f 91       	pop	r17
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	51 de       	rcall	.-862    	; 0xdba <__addsf3x>
    1118:	64 cf       	rjmp	.-312    	; 0xfe2 <__fp_round>

0000111a <__mulsf3>:
    111a:	0b d0       	rcall	.+22     	; 0x1132 <__mulsf3x>
    111c:	62 cf       	rjmp	.-316    	; 0xfe2 <__fp_round>
    111e:	53 df       	rcall	.-346    	; 0xfc6 <__fp_pscA>
    1120:	28 f0       	brcs	.+10     	; 0x112c <__mulsf3+0x12>
    1122:	58 df       	rcall	.-336    	; 0xfd4 <__fp_pscB>
    1124:	18 f0       	brcs	.+6      	; 0x112c <__mulsf3+0x12>
    1126:	95 23       	and	r25, r21
    1128:	09 f0       	breq	.+2      	; 0x112c <__mulsf3+0x12>
    112a:	1b cf       	rjmp	.-458    	; 0xf62 <__fp_inf>
    112c:	49 cf       	rjmp	.-366    	; 0xfc0 <__fp_nan>
    112e:	11 24       	eor	r1, r1
    1130:	a3 cf       	rjmp	.-186    	; 0x1078 <__fp_szero>

00001132 <__mulsf3x>:
    1132:	68 df       	rcall	.-304    	; 0x1004 <__fp_split3>
    1134:	a0 f3       	brcs	.-24     	; 0x111e <__mulsf3+0x4>

00001136 <__mulsf3_pse>:
    1136:	95 9f       	mul	r25, r21
    1138:	d1 f3       	breq	.-12     	; 0x112e <__mulsf3+0x14>
    113a:	95 0f       	add	r25, r21
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	55 1f       	adc	r21, r21
    1140:	62 9f       	mul	r22, r18
    1142:	f0 01       	movw	r30, r0
    1144:	72 9f       	mul	r23, r18
    1146:	bb 27       	eor	r27, r27
    1148:	f0 0d       	add	r31, r0
    114a:	b1 1d       	adc	r27, r1
    114c:	63 9f       	mul	r22, r19
    114e:	aa 27       	eor	r26, r26
    1150:	f0 0d       	add	r31, r0
    1152:	b1 1d       	adc	r27, r1
    1154:	aa 1f       	adc	r26, r26
    1156:	64 9f       	mul	r22, r20
    1158:	66 27       	eor	r22, r22
    115a:	b0 0d       	add	r27, r0
    115c:	a1 1d       	adc	r26, r1
    115e:	66 1f       	adc	r22, r22
    1160:	82 9f       	mul	r24, r18
    1162:	22 27       	eor	r18, r18
    1164:	b0 0d       	add	r27, r0
    1166:	a1 1d       	adc	r26, r1
    1168:	62 1f       	adc	r22, r18
    116a:	73 9f       	mul	r23, r19
    116c:	b0 0d       	add	r27, r0
    116e:	a1 1d       	adc	r26, r1
    1170:	62 1f       	adc	r22, r18
    1172:	83 9f       	mul	r24, r19
    1174:	a0 0d       	add	r26, r0
    1176:	61 1d       	adc	r22, r1
    1178:	22 1f       	adc	r18, r18
    117a:	74 9f       	mul	r23, r20
    117c:	33 27       	eor	r19, r19
    117e:	a0 0d       	add	r26, r0
    1180:	61 1d       	adc	r22, r1
    1182:	23 1f       	adc	r18, r19
    1184:	84 9f       	mul	r24, r20
    1186:	60 0d       	add	r22, r0
    1188:	21 1d       	adc	r18, r1
    118a:	82 2f       	mov	r24, r18
    118c:	76 2f       	mov	r23, r22
    118e:	6a 2f       	mov	r22, r26
    1190:	11 24       	eor	r1, r1
    1192:	9f 57       	subi	r25, 0x7F	; 127
    1194:	50 40       	sbci	r21, 0x00	; 0
    1196:	8a f0       	brmi	.+34     	; 0x11ba <__mulsf3_pse+0x84>
    1198:	e1 f0       	breq	.+56     	; 0x11d2 <__mulsf3_pse+0x9c>
    119a:	88 23       	and	r24, r24
    119c:	4a f0       	brmi	.+18     	; 0x11b0 <__mulsf3_pse+0x7a>
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	bb 1f       	adc	r27, r27
    11a4:	66 1f       	adc	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	91 50       	subi	r25, 0x01	; 1
    11ac:	50 40       	sbci	r21, 0x00	; 0
    11ae:	a9 f7       	brne	.-22     	; 0x119a <__mulsf3_pse+0x64>
    11b0:	9e 3f       	cpi	r25, 0xFE	; 254
    11b2:	51 05       	cpc	r21, r1
    11b4:	70 f0       	brcs	.+28     	; 0x11d2 <__mulsf3_pse+0x9c>
    11b6:	d5 ce       	rjmp	.-598    	; 0xf62 <__fp_inf>
    11b8:	5f cf       	rjmp	.-322    	; 0x1078 <__fp_szero>
    11ba:	5f 3f       	cpi	r21, 0xFF	; 255
    11bc:	ec f3       	brlt	.-6      	; 0x11b8 <__mulsf3_pse+0x82>
    11be:	98 3e       	cpi	r25, 0xE8	; 232
    11c0:	dc f3       	brlt	.-10     	; 0x11b8 <__mulsf3_pse+0x82>
    11c2:	86 95       	lsr	r24
    11c4:	77 95       	ror	r23
    11c6:	67 95       	ror	r22
    11c8:	b7 95       	ror	r27
    11ca:	f7 95       	ror	r31
    11cc:	e7 95       	ror	r30
    11ce:	9f 5f       	subi	r25, 0xFF	; 255
    11d0:	c1 f7       	brne	.-16     	; 0x11c2 <__mulsf3_pse+0x8c>
    11d2:	fe 2b       	or	r31, r30
    11d4:	88 0f       	add	r24, r24
    11d6:	91 1d       	adc	r25, r1
    11d8:	96 95       	lsr	r25
    11da:	87 95       	ror	r24
    11dc:	97 f9       	bld	r25, 7
    11de:	08 95       	ret

000011e0 <__fp_powser>:
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	1f 93       	push	r17
    11e6:	0f 93       	push	r16
    11e8:	ff 92       	push	r15
    11ea:	ef 92       	push	r14
    11ec:	df 92       	push	r13
    11ee:	7b 01       	movw	r14, r22
    11f0:	8c 01       	movw	r16, r24
    11f2:	68 94       	set
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <__fp_powser+0x20>
    11f6:	da 2e       	mov	r13, r26
    11f8:	ef 01       	movw	r28, r30
    11fa:	9b df       	rcall	.-202    	; 0x1132 <__mulsf3x>
    11fc:	fe 01       	movw	r30, r28
    11fe:	e8 94       	clt
    1200:	a5 91       	lpm	r26, Z+
    1202:	25 91       	lpm	r18, Z+
    1204:	35 91       	lpm	r19, Z+
    1206:	45 91       	lpm	r20, Z+
    1208:	55 91       	lpm	r21, Z+
    120a:	ae f3       	brts	.-22     	; 0x11f6 <__fp_powser+0x16>
    120c:	ef 01       	movw	r28, r30
    120e:	d5 dd       	rcall	.-1110   	; 0xdba <__addsf3x>
    1210:	fe 01       	movw	r30, r28
    1212:	97 01       	movw	r18, r14
    1214:	a8 01       	movw	r20, r16
    1216:	da 94       	dec	r13
    1218:	79 f7       	brne	.-34     	; 0x11f8 <__fp_powser+0x18>
    121a:	df 90       	pop	r13
    121c:	ef 90       	pop	r14
    121e:	ff 90       	pop	r15
    1220:	0f 91       	pop	r16
    1222:	1f 91       	pop	r17
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <__divmodhi4>:
    122a:	97 fb       	bst	r25, 7
    122c:	07 2e       	mov	r0, r23
    122e:	16 f4       	brtc	.+4      	; 0x1234 <__divmodhi4+0xa>
    1230:	00 94       	com	r0
    1232:	06 d0       	rcall	.+12     	; 0x1240 <__divmodhi4_neg1>
    1234:	77 fd       	sbrc	r23, 7
    1236:	08 d0       	rcall	.+16     	; 0x1248 <__divmodhi4_neg2>
    1238:	0b d0       	rcall	.+22     	; 0x1250 <__udivmodhi4>
    123a:	07 fc       	sbrc	r0, 7
    123c:	05 d0       	rcall	.+10     	; 0x1248 <__divmodhi4_neg2>
    123e:	3e f4       	brtc	.+14     	; 0x124e <__divmodhi4_exit>

00001240 <__divmodhi4_neg1>:
    1240:	90 95       	com	r25
    1242:	81 95       	neg	r24
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	08 95       	ret

00001248 <__divmodhi4_neg2>:
    1248:	70 95       	com	r23
    124a:	61 95       	neg	r22
    124c:	7f 4f       	sbci	r23, 0xFF	; 255

0000124e <__divmodhi4_exit>:
    124e:	08 95       	ret

00001250 <__udivmodhi4>:
    1250:	aa 1b       	sub	r26, r26
    1252:	bb 1b       	sub	r27, r27
    1254:	51 e1       	ldi	r21, 0x11	; 17
    1256:	07 c0       	rjmp	.+14     	; 0x1266 <__udivmodhi4_ep>

00001258 <__udivmodhi4_loop>:
    1258:	aa 1f       	adc	r26, r26
    125a:	bb 1f       	adc	r27, r27
    125c:	a6 17       	cp	r26, r22
    125e:	b7 07       	cpc	r27, r23
    1260:	10 f0       	brcs	.+4      	; 0x1266 <__udivmodhi4_ep>
    1262:	a6 1b       	sub	r26, r22
    1264:	b7 0b       	sbc	r27, r23

00001266 <__udivmodhi4_ep>:
    1266:	88 1f       	adc	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	5a 95       	dec	r21
    126c:	a9 f7       	brne	.-22     	; 0x1258 <__udivmodhi4_loop>
    126e:	80 95       	com	r24
    1270:	90 95       	com	r25
    1272:	bc 01       	movw	r22, r24
    1274:	cd 01       	movw	r24, r26
    1276:	08 95       	ret

00001278 <snprintf>:
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	2e 97       	sbiw	r28, 0x0e	; 14
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	0e 89       	ldd	r16, Y+22	; 0x16
    1292:	1f 89       	ldd	r17, Y+23	; 0x17
    1294:	88 8d       	ldd	r24, Y+24	; 0x18
    1296:	99 8d       	ldd	r25, Y+25	; 0x19
    1298:	26 e0       	ldi	r18, 0x06	; 6
    129a:	2c 83       	std	Y+4, r18	; 0x04
    129c:	1a 83       	std	Y+2, r17	; 0x02
    129e:	09 83       	std	Y+1, r16	; 0x01
    12a0:	97 ff       	sbrs	r25, 7
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <snprintf+0x30>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e8       	ldi	r25, 0x80	; 128
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	ae 01       	movw	r20, r28
    12b0:	44 5e       	subi	r20, 0xE4	; 228
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    12b6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	47 d0       	rcall	.+142    	; 0x134c <vfprintf>
    12be:	4d 81       	ldd	r20, Y+5	; 0x05
    12c0:	5e 81       	ldd	r21, Y+6	; 0x06
    12c2:	57 fd       	sbrc	r21, 7
    12c4:	0a c0       	rjmp	.+20     	; 0x12da <snprintf+0x62>
    12c6:	2f 81       	ldd	r18, Y+7	; 0x07
    12c8:	38 85       	ldd	r19, Y+8	; 0x08
    12ca:	42 17       	cp	r20, r18
    12cc:	53 07       	cpc	r21, r19
    12ce:	0c f4       	brge	.+2      	; 0x12d2 <snprintf+0x5a>
    12d0:	9a 01       	movw	r18, r20
    12d2:	f8 01       	movw	r30, r16
    12d4:	e2 0f       	add	r30, r18
    12d6:	f3 1f       	adc	r31, r19
    12d8:	10 82       	st	Z, r1
    12da:	2e 96       	adiw	r28, 0x0e	; 14
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <sprintf>:
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	2e 97       	sbiw	r28, 0x0e	; 14
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	0e 89       	ldd	r16, Y+22	; 0x16
    130a:	1f 89       	ldd	r17, Y+23	; 0x17
    130c:	86 e0       	ldi	r24, 0x06	; 6
    130e:	8c 83       	std	Y+4, r24	; 0x04
    1310:	1a 83       	std	Y+2, r17	; 0x02
    1312:	09 83       	std	Y+1, r16	; 0x01
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	9f e7       	ldi	r25, 0x7F	; 127
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
    131c:	ae 01       	movw	r20, r28
    131e:	46 5e       	subi	r20, 0xE6	; 230
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	68 8d       	ldd	r22, Y+24	; 0x18
    1324:	79 8d       	ldd	r23, Y+25	; 0x19
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	10 d0       	rcall	.+32     	; 0x134c <vfprintf>
    132c:	ef 81       	ldd	r30, Y+7	; 0x07
    132e:	f8 85       	ldd	r31, Y+8	; 0x08
    1330:	e0 0f       	add	r30, r16
    1332:	f1 1f       	adc	r31, r17
    1334:	10 82       	st	Z, r1
    1336:	2e 96       	adiw	r28, 0x0e	; 14
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <vfprintf>:
    134c:	2f 92       	push	r2
    134e:	3f 92       	push	r3
    1350:	4f 92       	push	r4
    1352:	5f 92       	push	r5
    1354:	6f 92       	push	r6
    1356:	7f 92       	push	r7
    1358:	8f 92       	push	r8
    135a:	9f 92       	push	r9
    135c:	af 92       	push	r10
    135e:	bf 92       	push	r11
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	2b 97       	sbiw	r28, 0x0b	; 11
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	6c 01       	movw	r12, r24
    1382:	7b 01       	movw	r14, r22
    1384:	8a 01       	movw	r16, r20
    1386:	fc 01       	movw	r30, r24
    1388:	17 82       	std	Z+7, r1	; 0x07
    138a:	16 82       	std	Z+6, r1	; 0x06
    138c:	83 81       	ldd	r24, Z+3	; 0x03
    138e:	81 ff       	sbrs	r24, 1
    1390:	bf c1       	rjmp	.+894    	; 0x1710 <vfprintf+0x3c4>
    1392:	ce 01       	movw	r24, r28
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	3c 01       	movw	r6, r24
    1398:	f6 01       	movw	r30, r12
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	f7 01       	movw	r30, r14
    139e:	93 fd       	sbrc	r25, 3
    13a0:	85 91       	lpm	r24, Z+
    13a2:	93 ff       	sbrs	r25, 3
    13a4:	81 91       	ld	r24, Z+
    13a6:	7f 01       	movw	r14, r30
    13a8:	88 23       	and	r24, r24
    13aa:	09 f4       	brne	.+2      	; 0x13ae <vfprintf+0x62>
    13ac:	ad c1       	rjmp	.+858    	; 0x1708 <vfprintf+0x3bc>
    13ae:	85 32       	cpi	r24, 0x25	; 37
    13b0:	39 f4       	brne	.+14     	; 0x13c0 <vfprintf+0x74>
    13b2:	93 fd       	sbrc	r25, 3
    13b4:	85 91       	lpm	r24, Z+
    13b6:	93 ff       	sbrs	r25, 3
    13b8:	81 91       	ld	r24, Z+
    13ba:	7f 01       	movw	r14, r30
    13bc:	85 32       	cpi	r24, 0x25	; 37
    13be:	21 f4       	brne	.+8      	; 0x13c8 <vfprintf+0x7c>
    13c0:	b6 01       	movw	r22, r12
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	d6 d1       	rcall	.+940    	; 0x1772 <fputc>
    13c6:	e8 cf       	rjmp	.-48     	; 0x1398 <vfprintf+0x4c>
    13c8:	91 2c       	mov	r9, r1
    13ca:	21 2c       	mov	r2, r1
    13cc:	31 2c       	mov	r3, r1
    13ce:	ff e1       	ldi	r31, 0x1F	; 31
    13d0:	f3 15       	cp	r31, r3
    13d2:	d8 f0       	brcs	.+54     	; 0x140a <vfprintf+0xbe>
    13d4:	8b 32       	cpi	r24, 0x2B	; 43
    13d6:	79 f0       	breq	.+30     	; 0x13f6 <vfprintf+0xaa>
    13d8:	38 f4       	brcc	.+14     	; 0x13e8 <vfprintf+0x9c>
    13da:	80 32       	cpi	r24, 0x20	; 32
    13dc:	79 f0       	breq	.+30     	; 0x13fc <vfprintf+0xb0>
    13de:	83 32       	cpi	r24, 0x23	; 35
    13e0:	a1 f4       	brne	.+40     	; 0x140a <vfprintf+0xbe>
    13e2:	23 2d       	mov	r18, r3
    13e4:	20 61       	ori	r18, 0x10	; 16
    13e6:	1d c0       	rjmp	.+58     	; 0x1422 <vfprintf+0xd6>
    13e8:	8d 32       	cpi	r24, 0x2D	; 45
    13ea:	61 f0       	breq	.+24     	; 0x1404 <vfprintf+0xb8>
    13ec:	80 33       	cpi	r24, 0x30	; 48
    13ee:	69 f4       	brne	.+26     	; 0x140a <vfprintf+0xbe>
    13f0:	23 2d       	mov	r18, r3
    13f2:	21 60       	ori	r18, 0x01	; 1
    13f4:	16 c0       	rjmp	.+44     	; 0x1422 <vfprintf+0xd6>
    13f6:	83 2d       	mov	r24, r3
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	38 2e       	mov	r3, r24
    13fc:	e3 2d       	mov	r30, r3
    13fe:	e4 60       	ori	r30, 0x04	; 4
    1400:	3e 2e       	mov	r3, r30
    1402:	2a c0       	rjmp	.+84     	; 0x1458 <vfprintf+0x10c>
    1404:	f3 2d       	mov	r31, r3
    1406:	f8 60       	ori	r31, 0x08	; 8
    1408:	1d c0       	rjmp	.+58     	; 0x1444 <vfprintf+0xf8>
    140a:	37 fc       	sbrc	r3, 7
    140c:	2d c0       	rjmp	.+90     	; 0x1468 <vfprintf+0x11c>
    140e:	20 ed       	ldi	r18, 0xD0	; 208
    1410:	28 0f       	add	r18, r24
    1412:	2a 30       	cpi	r18, 0x0A	; 10
    1414:	40 f0       	brcs	.+16     	; 0x1426 <vfprintf+0xda>
    1416:	8e 32       	cpi	r24, 0x2E	; 46
    1418:	b9 f4       	brne	.+46     	; 0x1448 <vfprintf+0xfc>
    141a:	36 fc       	sbrc	r3, 6
    141c:	75 c1       	rjmp	.+746    	; 0x1708 <vfprintf+0x3bc>
    141e:	23 2d       	mov	r18, r3
    1420:	20 64       	ori	r18, 0x40	; 64
    1422:	32 2e       	mov	r3, r18
    1424:	19 c0       	rjmp	.+50     	; 0x1458 <vfprintf+0x10c>
    1426:	36 fe       	sbrs	r3, 6
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <vfprintf+0xea>
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	98 9e       	mul	r9, r24
    142e:	20 0d       	add	r18, r0
    1430:	11 24       	eor	r1, r1
    1432:	92 2e       	mov	r9, r18
    1434:	11 c0       	rjmp	.+34     	; 0x1458 <vfprintf+0x10c>
    1436:	ea e0       	ldi	r30, 0x0A	; 10
    1438:	2e 9e       	mul	r2, r30
    143a:	20 0d       	add	r18, r0
    143c:	11 24       	eor	r1, r1
    143e:	22 2e       	mov	r2, r18
    1440:	f3 2d       	mov	r31, r3
    1442:	f0 62       	ori	r31, 0x20	; 32
    1444:	3f 2e       	mov	r3, r31
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <vfprintf+0x10c>
    1448:	8c 36       	cpi	r24, 0x6C	; 108
    144a:	21 f4       	brne	.+8      	; 0x1454 <vfprintf+0x108>
    144c:	83 2d       	mov	r24, r3
    144e:	80 68       	ori	r24, 0x80	; 128
    1450:	38 2e       	mov	r3, r24
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <vfprintf+0x10c>
    1454:	88 36       	cpi	r24, 0x68	; 104
    1456:	41 f4       	brne	.+16     	; 0x1468 <vfprintf+0x11c>
    1458:	f7 01       	movw	r30, r14
    145a:	93 fd       	sbrc	r25, 3
    145c:	85 91       	lpm	r24, Z+
    145e:	93 ff       	sbrs	r25, 3
    1460:	81 91       	ld	r24, Z+
    1462:	7f 01       	movw	r14, r30
    1464:	81 11       	cpse	r24, r1
    1466:	b3 cf       	rjmp	.-154    	; 0x13ce <vfprintf+0x82>
    1468:	98 2f       	mov	r25, r24
    146a:	9f 7d       	andi	r25, 0xDF	; 223
    146c:	95 54       	subi	r25, 0x45	; 69
    146e:	93 30       	cpi	r25, 0x03	; 3
    1470:	28 f4       	brcc	.+10     	; 0x147c <vfprintf+0x130>
    1472:	0c 5f       	subi	r16, 0xFC	; 252
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	9f e3       	ldi	r25, 0x3F	; 63
    1478:	99 83       	std	Y+1, r25	; 0x01
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <vfprintf+0x14a>
    147c:	83 36       	cpi	r24, 0x63	; 99
    147e:	31 f0       	breq	.+12     	; 0x148c <vfprintf+0x140>
    1480:	83 37       	cpi	r24, 0x73	; 115
    1482:	71 f0       	breq	.+28     	; 0x14a0 <vfprintf+0x154>
    1484:	83 35       	cpi	r24, 0x53	; 83
    1486:	09 f0       	breq	.+2      	; 0x148a <vfprintf+0x13e>
    1488:	55 c0       	rjmp	.+170    	; 0x1534 <vfprintf+0x1e8>
    148a:	20 c0       	rjmp	.+64     	; 0x14cc <vfprintf+0x180>
    148c:	f8 01       	movw	r30, r16
    148e:	80 81       	ld	r24, Z
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	0e 5f       	subi	r16, 0xFE	; 254
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	88 24       	eor	r8, r8
    1498:	83 94       	inc	r8
    149a:	91 2c       	mov	r9, r1
    149c:	53 01       	movw	r10, r6
    149e:	12 c0       	rjmp	.+36     	; 0x14c4 <vfprintf+0x178>
    14a0:	28 01       	movw	r4, r16
    14a2:	f2 e0       	ldi	r31, 0x02	; 2
    14a4:	4f 0e       	add	r4, r31
    14a6:	51 1c       	adc	r5, r1
    14a8:	f8 01       	movw	r30, r16
    14aa:	a0 80       	ld	r10, Z
    14ac:	b1 80       	ldd	r11, Z+1	; 0x01
    14ae:	36 fe       	sbrs	r3, 6
    14b0:	03 c0       	rjmp	.+6      	; 0x14b8 <vfprintf+0x16c>
    14b2:	69 2d       	mov	r22, r9
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <vfprintf+0x170>
    14b8:	6f ef       	ldi	r22, 0xFF	; 255
    14ba:	7f ef       	ldi	r23, 0xFF	; 255
    14bc:	c5 01       	movw	r24, r10
    14be:	4e d1       	rcall	.+668    	; 0x175c <strnlen>
    14c0:	4c 01       	movw	r8, r24
    14c2:	82 01       	movw	r16, r4
    14c4:	f3 2d       	mov	r31, r3
    14c6:	ff 77       	andi	r31, 0x7F	; 127
    14c8:	3f 2e       	mov	r3, r31
    14ca:	15 c0       	rjmp	.+42     	; 0x14f6 <vfprintf+0x1aa>
    14cc:	28 01       	movw	r4, r16
    14ce:	22 e0       	ldi	r18, 0x02	; 2
    14d0:	42 0e       	add	r4, r18
    14d2:	51 1c       	adc	r5, r1
    14d4:	f8 01       	movw	r30, r16
    14d6:	a0 80       	ld	r10, Z
    14d8:	b1 80       	ldd	r11, Z+1	; 0x01
    14da:	36 fe       	sbrs	r3, 6
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <vfprintf+0x198>
    14de:	69 2d       	mov	r22, r9
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <vfprintf+0x19c>
    14e4:	6f ef       	ldi	r22, 0xFF	; 255
    14e6:	7f ef       	ldi	r23, 0xFF	; 255
    14e8:	c5 01       	movw	r24, r10
    14ea:	2d d1       	rcall	.+602    	; 0x1746 <strnlen_P>
    14ec:	4c 01       	movw	r8, r24
    14ee:	f3 2d       	mov	r31, r3
    14f0:	f0 68       	ori	r31, 0x80	; 128
    14f2:	3f 2e       	mov	r3, r31
    14f4:	82 01       	movw	r16, r4
    14f6:	33 fc       	sbrc	r3, 3
    14f8:	19 c0       	rjmp	.+50     	; 0x152c <vfprintf+0x1e0>
    14fa:	82 2d       	mov	r24, r2
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	88 16       	cp	r8, r24
    1500:	99 06       	cpc	r9, r25
    1502:	a0 f4       	brcc	.+40     	; 0x152c <vfprintf+0x1e0>
    1504:	b6 01       	movw	r22, r12
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	33 d1       	rcall	.+614    	; 0x1772 <fputc>
    150c:	2a 94       	dec	r2
    150e:	f5 cf       	rjmp	.-22     	; 0x14fa <vfprintf+0x1ae>
    1510:	f5 01       	movw	r30, r10
    1512:	37 fc       	sbrc	r3, 7
    1514:	85 91       	lpm	r24, Z+
    1516:	37 fe       	sbrs	r3, 7
    1518:	81 91       	ld	r24, Z+
    151a:	5f 01       	movw	r10, r30
    151c:	b6 01       	movw	r22, r12
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	28 d1       	rcall	.+592    	; 0x1772 <fputc>
    1522:	21 10       	cpse	r2, r1
    1524:	2a 94       	dec	r2
    1526:	21 e0       	ldi	r18, 0x01	; 1
    1528:	82 1a       	sub	r8, r18
    152a:	91 08       	sbc	r9, r1
    152c:	81 14       	cp	r8, r1
    152e:	91 04       	cpc	r9, r1
    1530:	79 f7       	brne	.-34     	; 0x1510 <vfprintf+0x1c4>
    1532:	e1 c0       	rjmp	.+450    	; 0x16f6 <vfprintf+0x3aa>
    1534:	84 36       	cpi	r24, 0x64	; 100
    1536:	11 f0       	breq	.+4      	; 0x153c <vfprintf+0x1f0>
    1538:	89 36       	cpi	r24, 0x69	; 105
    153a:	39 f5       	brne	.+78     	; 0x158a <vfprintf+0x23e>
    153c:	f8 01       	movw	r30, r16
    153e:	37 fe       	sbrs	r3, 7
    1540:	07 c0       	rjmp	.+14     	; 0x1550 <vfprintf+0x204>
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	0c 5f       	subi	r16, 0xFC	; 252
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <vfprintf+0x214>
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	07 2e       	mov	r0, r23
    1556:	00 0c       	add	r0, r0
    1558:	88 0b       	sbc	r24, r24
    155a:	99 0b       	sbc	r25, r25
    155c:	0e 5f       	subi	r16, 0xFE	; 254
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	f3 2d       	mov	r31, r3
    1562:	ff 76       	andi	r31, 0x6F	; 111
    1564:	3f 2e       	mov	r3, r31
    1566:	97 ff       	sbrs	r25, 7
    1568:	09 c0       	rjmp	.+18     	; 0x157c <vfprintf+0x230>
    156a:	90 95       	com	r25
    156c:	80 95       	com	r24
    156e:	70 95       	com	r23
    1570:	61 95       	neg	r22
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	f0 68       	ori	r31, 0x80	; 128
    157a:	3f 2e       	mov	r3, r31
    157c:	2a e0       	ldi	r18, 0x0A	; 10
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	a3 01       	movw	r20, r6
    1582:	33 d1       	rcall	.+614    	; 0x17ea <__ultoa_invert>
    1584:	88 2e       	mov	r8, r24
    1586:	86 18       	sub	r8, r6
    1588:	44 c0       	rjmp	.+136    	; 0x1612 <vfprintf+0x2c6>
    158a:	85 37       	cpi	r24, 0x75	; 117
    158c:	31 f4       	brne	.+12     	; 0x159a <vfprintf+0x24e>
    158e:	23 2d       	mov	r18, r3
    1590:	2f 7e       	andi	r18, 0xEF	; 239
    1592:	b2 2e       	mov	r11, r18
    1594:	2a e0       	ldi	r18, 0x0A	; 10
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	25 c0       	rjmp	.+74     	; 0x15e4 <vfprintf+0x298>
    159a:	93 2d       	mov	r25, r3
    159c:	99 7f       	andi	r25, 0xF9	; 249
    159e:	b9 2e       	mov	r11, r25
    15a0:	8f 36       	cpi	r24, 0x6F	; 111
    15a2:	c1 f0       	breq	.+48     	; 0x15d4 <vfprintf+0x288>
    15a4:	18 f4       	brcc	.+6      	; 0x15ac <vfprintf+0x260>
    15a6:	88 35       	cpi	r24, 0x58	; 88
    15a8:	79 f0       	breq	.+30     	; 0x15c8 <vfprintf+0x27c>
    15aa:	ae c0       	rjmp	.+348    	; 0x1708 <vfprintf+0x3bc>
    15ac:	80 37       	cpi	r24, 0x70	; 112
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <vfprintf+0x26a>
    15b0:	88 37       	cpi	r24, 0x78	; 120
    15b2:	21 f0       	breq	.+8      	; 0x15bc <vfprintf+0x270>
    15b4:	a9 c0       	rjmp	.+338    	; 0x1708 <vfprintf+0x3bc>
    15b6:	e9 2f       	mov	r30, r25
    15b8:	e0 61       	ori	r30, 0x10	; 16
    15ba:	be 2e       	mov	r11, r30
    15bc:	b4 fe       	sbrs	r11, 4
    15be:	0d c0       	rjmp	.+26     	; 0x15da <vfprintf+0x28e>
    15c0:	fb 2d       	mov	r31, r11
    15c2:	f4 60       	ori	r31, 0x04	; 4
    15c4:	bf 2e       	mov	r11, r31
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <vfprintf+0x28e>
    15c8:	34 fe       	sbrs	r3, 4
    15ca:	0a c0       	rjmp	.+20     	; 0x15e0 <vfprintf+0x294>
    15cc:	29 2f       	mov	r18, r25
    15ce:	26 60       	ori	r18, 0x06	; 6
    15d0:	b2 2e       	mov	r11, r18
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <vfprintf+0x294>
    15d4:	28 e0       	ldi	r18, 0x08	; 8
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	05 c0       	rjmp	.+10     	; 0x15e4 <vfprintf+0x298>
    15da:	20 e1       	ldi	r18, 0x10	; 16
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0x298>
    15e0:	20 e1       	ldi	r18, 0x10	; 16
    15e2:	32 e0       	ldi	r19, 0x02	; 2
    15e4:	f8 01       	movw	r30, r16
    15e6:	b7 fe       	sbrs	r11, 7
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <vfprintf+0x2ac>
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	0c 5f       	subi	r16, 0xFC	; 252
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <vfprintf+0x2b8>
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 5f       	subi	r16, 0xFE	; 254
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	a3 01       	movw	r20, r6
    1606:	f1 d0       	rcall	.+482    	; 0x17ea <__ultoa_invert>
    1608:	88 2e       	mov	r8, r24
    160a:	86 18       	sub	r8, r6
    160c:	fb 2d       	mov	r31, r11
    160e:	ff 77       	andi	r31, 0x7F	; 127
    1610:	3f 2e       	mov	r3, r31
    1612:	36 fe       	sbrs	r3, 6
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <vfprintf+0x2e4>
    1616:	23 2d       	mov	r18, r3
    1618:	2e 7f       	andi	r18, 0xFE	; 254
    161a:	a2 2e       	mov	r10, r18
    161c:	89 14       	cp	r8, r9
    161e:	58 f4       	brcc	.+22     	; 0x1636 <vfprintf+0x2ea>
    1620:	34 fe       	sbrs	r3, 4
    1622:	0b c0       	rjmp	.+22     	; 0x163a <vfprintf+0x2ee>
    1624:	32 fc       	sbrc	r3, 2
    1626:	09 c0       	rjmp	.+18     	; 0x163a <vfprintf+0x2ee>
    1628:	83 2d       	mov	r24, r3
    162a:	8e 7e       	andi	r24, 0xEE	; 238
    162c:	a8 2e       	mov	r10, r24
    162e:	05 c0       	rjmp	.+10     	; 0x163a <vfprintf+0x2ee>
    1630:	b8 2c       	mov	r11, r8
    1632:	a3 2c       	mov	r10, r3
    1634:	03 c0       	rjmp	.+6      	; 0x163c <vfprintf+0x2f0>
    1636:	b8 2c       	mov	r11, r8
    1638:	01 c0       	rjmp	.+2      	; 0x163c <vfprintf+0x2f0>
    163a:	b9 2c       	mov	r11, r9
    163c:	a4 fe       	sbrs	r10, 4
    163e:	0f c0       	rjmp	.+30     	; 0x165e <vfprintf+0x312>
    1640:	fe 01       	movw	r30, r28
    1642:	e8 0d       	add	r30, r8
    1644:	f1 1d       	adc	r31, r1
    1646:	80 81       	ld	r24, Z
    1648:	80 33       	cpi	r24, 0x30	; 48
    164a:	21 f4       	brne	.+8      	; 0x1654 <vfprintf+0x308>
    164c:	9a 2d       	mov	r25, r10
    164e:	99 7e       	andi	r25, 0xE9	; 233
    1650:	a9 2e       	mov	r10, r25
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <vfprintf+0x31a>
    1654:	a2 fe       	sbrs	r10, 2
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <vfprintf+0x318>
    1658:	b3 94       	inc	r11
    165a:	b3 94       	inc	r11
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <vfprintf+0x31a>
    165e:	8a 2d       	mov	r24, r10
    1660:	86 78       	andi	r24, 0x86	; 134
    1662:	09 f0       	breq	.+2      	; 0x1666 <vfprintf+0x31a>
    1664:	b3 94       	inc	r11
    1666:	a3 fc       	sbrc	r10, 3
    1668:	10 c0       	rjmp	.+32     	; 0x168a <vfprintf+0x33e>
    166a:	a0 fe       	sbrs	r10, 0
    166c:	06 c0       	rjmp	.+12     	; 0x167a <vfprintf+0x32e>
    166e:	b2 14       	cp	r11, r2
    1670:	80 f4       	brcc	.+32     	; 0x1692 <vfprintf+0x346>
    1672:	28 0c       	add	r2, r8
    1674:	92 2c       	mov	r9, r2
    1676:	9b 18       	sub	r9, r11
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <vfprintf+0x348>
    167a:	b2 14       	cp	r11, r2
    167c:	58 f4       	brcc	.+22     	; 0x1694 <vfprintf+0x348>
    167e:	b6 01       	movw	r22, r12
    1680:	80 e2       	ldi	r24, 0x20	; 32
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	76 d0       	rcall	.+236    	; 0x1772 <fputc>
    1686:	b3 94       	inc	r11
    1688:	f8 cf       	rjmp	.-16     	; 0x167a <vfprintf+0x32e>
    168a:	b2 14       	cp	r11, r2
    168c:	18 f4       	brcc	.+6      	; 0x1694 <vfprintf+0x348>
    168e:	2b 18       	sub	r2, r11
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <vfprintf+0x34a>
    1692:	98 2c       	mov	r9, r8
    1694:	21 2c       	mov	r2, r1
    1696:	a4 fe       	sbrs	r10, 4
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <vfprintf+0x36c>
    169a:	b6 01       	movw	r22, r12
    169c:	80 e3       	ldi	r24, 0x30	; 48
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	68 d0       	rcall	.+208    	; 0x1772 <fputc>
    16a2:	a2 fe       	sbrs	r10, 2
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <vfprintf+0x386>
    16a6:	a1 fc       	sbrc	r10, 1
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <vfprintf+0x364>
    16aa:	88 e7       	ldi	r24, 0x78	; 120
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x368>
    16b0:	88 e5       	ldi	r24, 0x58	; 88
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	b6 01       	movw	r22, r12
    16b6:	0c c0       	rjmp	.+24     	; 0x16d0 <vfprintf+0x384>
    16b8:	8a 2d       	mov	r24, r10
    16ba:	86 78       	andi	r24, 0x86	; 134
    16bc:	51 f0       	breq	.+20     	; 0x16d2 <vfprintf+0x386>
    16be:	a1 fe       	sbrs	r10, 1
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <vfprintf+0x37a>
    16c2:	8b e2       	ldi	r24, 0x2B	; 43
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <vfprintf+0x37c>
    16c6:	80 e2       	ldi	r24, 0x20	; 32
    16c8:	a7 fc       	sbrc	r10, 7
    16ca:	8d e2       	ldi	r24, 0x2D	; 45
    16cc:	b6 01       	movw	r22, r12
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	50 d0       	rcall	.+160    	; 0x1772 <fputc>
    16d2:	89 14       	cp	r8, r9
    16d4:	30 f4       	brcc	.+12     	; 0x16e2 <vfprintf+0x396>
    16d6:	b6 01       	movw	r22, r12
    16d8:	80 e3       	ldi	r24, 0x30	; 48
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	4a d0       	rcall	.+148    	; 0x1772 <fputc>
    16de:	9a 94       	dec	r9
    16e0:	f8 cf       	rjmp	.-16     	; 0x16d2 <vfprintf+0x386>
    16e2:	8a 94       	dec	r8
    16e4:	f3 01       	movw	r30, r6
    16e6:	e8 0d       	add	r30, r8
    16e8:	f1 1d       	adc	r31, r1
    16ea:	80 81       	ld	r24, Z
    16ec:	b6 01       	movw	r22, r12
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	40 d0       	rcall	.+128    	; 0x1772 <fputc>
    16f2:	81 10       	cpse	r8, r1
    16f4:	f6 cf       	rjmp	.-20     	; 0x16e2 <vfprintf+0x396>
    16f6:	22 20       	and	r2, r2
    16f8:	09 f4       	brne	.+2      	; 0x16fc <vfprintf+0x3b0>
    16fa:	4e ce       	rjmp	.-868    	; 0x1398 <vfprintf+0x4c>
    16fc:	b6 01       	movw	r22, r12
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	37 d0       	rcall	.+110    	; 0x1772 <fputc>
    1704:	2a 94       	dec	r2
    1706:	f7 cf       	rjmp	.-18     	; 0x16f6 <vfprintf+0x3aa>
    1708:	f6 01       	movw	r30, r12
    170a:	86 81       	ldd	r24, Z+6	; 0x06
    170c:	97 81       	ldd	r25, Z+7	; 0x07
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <vfprintf+0x3c8>
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	9f ef       	ldi	r25, 0xFF	; 255
    1714:	2b 96       	adiw	r28, 0x0b	; 11
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	bf 90       	pop	r11
    1732:	af 90       	pop	r10
    1734:	9f 90       	pop	r9
    1736:	8f 90       	pop	r8
    1738:	7f 90       	pop	r7
    173a:	6f 90       	pop	r6
    173c:	5f 90       	pop	r5
    173e:	4f 90       	pop	r4
    1740:	3f 90       	pop	r3
    1742:	2f 90       	pop	r2
    1744:	08 95       	ret

00001746 <strnlen_P>:
    1746:	fc 01       	movw	r30, r24
    1748:	05 90       	lpm	r0, Z+
    174a:	61 50       	subi	r22, 0x01	; 1
    174c:	70 40       	sbci	r23, 0x00	; 0
    174e:	01 10       	cpse	r0, r1
    1750:	d8 f7       	brcc	.-10     	; 0x1748 <strnlen_P+0x2>
    1752:	80 95       	com	r24
    1754:	90 95       	com	r25
    1756:	8e 0f       	add	r24, r30
    1758:	9f 1f       	adc	r25, r31
    175a:	08 95       	ret

0000175c <strnlen>:
    175c:	fc 01       	movw	r30, r24
    175e:	61 50       	subi	r22, 0x01	; 1
    1760:	70 40       	sbci	r23, 0x00	; 0
    1762:	01 90       	ld	r0, Z+
    1764:	01 10       	cpse	r0, r1
    1766:	d8 f7       	brcc	.-10     	; 0x175e <strnlen+0x2>
    1768:	80 95       	com	r24
    176a:	90 95       	com	r25
    176c:	8e 0f       	add	r24, r30
    176e:	9f 1f       	adc	r25, r31
    1770:	08 95       	ret

00001772 <fputc>:
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	fb 01       	movw	r30, r22
    177c:	23 81       	ldd	r18, Z+3	; 0x03
    177e:	21 fd       	sbrc	r18, 1
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <fputc+0x16>
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	9f ef       	ldi	r25, 0xFF	; 255
    1786:	2c c0       	rjmp	.+88     	; 0x17e0 <fputc+0x6e>
    1788:	22 ff       	sbrs	r18, 2
    178a:	16 c0       	rjmp	.+44     	; 0x17b8 <fputc+0x46>
    178c:	46 81       	ldd	r20, Z+6	; 0x06
    178e:	57 81       	ldd	r21, Z+7	; 0x07
    1790:	24 81       	ldd	r18, Z+4	; 0x04
    1792:	35 81       	ldd	r19, Z+5	; 0x05
    1794:	42 17       	cp	r20, r18
    1796:	53 07       	cpc	r21, r19
    1798:	44 f4       	brge	.+16     	; 0x17aa <fputc+0x38>
    179a:	a0 81       	ld	r26, Z
    179c:	b1 81       	ldd	r27, Z+1	; 0x01
    179e:	9d 01       	movw	r18, r26
    17a0:	2f 5f       	subi	r18, 0xFF	; 255
    17a2:	3f 4f       	sbci	r19, 0xFF	; 255
    17a4:	31 83       	std	Z+1, r19	; 0x01
    17a6:	20 83       	st	Z, r18
    17a8:	8c 93       	st	X, r24
    17aa:	26 81       	ldd	r18, Z+6	; 0x06
    17ac:	37 81       	ldd	r19, Z+7	; 0x07
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	37 83       	std	Z+7, r19	; 0x07
    17b4:	26 83       	std	Z+6, r18	; 0x06
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <fputc+0x6e>
    17b8:	8b 01       	movw	r16, r22
    17ba:	ec 01       	movw	r28, r24
    17bc:	fb 01       	movw	r30, r22
    17be:	00 84       	ldd	r0, Z+8	; 0x08
    17c0:	f1 85       	ldd	r31, Z+9	; 0x09
    17c2:	e0 2d       	mov	r30, r0
    17c4:	19 95       	eicall
    17c6:	89 2b       	or	r24, r25
    17c8:	e1 f6       	brne	.-72     	; 0x1782 <fputc+0x10>
    17ca:	d8 01       	movw	r26, r16
    17cc:	16 96       	adiw	r26, 0x06	; 6
    17ce:	8d 91       	ld	r24, X+
    17d0:	9c 91       	ld	r25, X
    17d2:	17 97       	sbiw	r26, 0x07	; 7
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	17 96       	adiw	r26, 0x07	; 7
    17d8:	9c 93       	st	X, r25
    17da:	8e 93       	st	-X, r24
    17dc:	16 97       	sbiw	r26, 0x06	; 6
    17de:	ce 01       	movw	r24, r28
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	08 95       	ret

000017ea <__ultoa_invert>:
    17ea:	fa 01       	movw	r30, r20
    17ec:	aa 27       	eor	r26, r26
    17ee:	28 30       	cpi	r18, 0x08	; 8
    17f0:	51 f1       	breq	.+84     	; 0x1846 <__ultoa_invert+0x5c>
    17f2:	20 31       	cpi	r18, 0x10	; 16
    17f4:	81 f1       	breq	.+96     	; 0x1856 <__ultoa_invert+0x6c>
    17f6:	e8 94       	clt
    17f8:	6f 93       	push	r22
    17fa:	6e 7f       	andi	r22, 0xFE	; 254
    17fc:	6e 5f       	subi	r22, 0xFE	; 254
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	8f 4f       	sbci	r24, 0xFF	; 255
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	af 4f       	sbci	r26, 0xFF	; 255
    1806:	b1 e0       	ldi	r27, 0x01	; 1
    1808:	3e d0       	rcall	.+124    	; 0x1886 <__ultoa_invert+0x9c>
    180a:	b4 e0       	ldi	r27, 0x04	; 4
    180c:	3c d0       	rcall	.+120    	; 0x1886 <__ultoa_invert+0x9c>
    180e:	67 0f       	add	r22, r23
    1810:	78 1f       	adc	r23, r24
    1812:	89 1f       	adc	r24, r25
    1814:	9a 1f       	adc	r25, r26
    1816:	a1 1d       	adc	r26, r1
    1818:	68 0f       	add	r22, r24
    181a:	79 1f       	adc	r23, r25
    181c:	8a 1f       	adc	r24, r26
    181e:	91 1d       	adc	r25, r1
    1820:	a1 1d       	adc	r26, r1
    1822:	6a 0f       	add	r22, r26
    1824:	71 1d       	adc	r23, r1
    1826:	81 1d       	adc	r24, r1
    1828:	91 1d       	adc	r25, r1
    182a:	a1 1d       	adc	r26, r1
    182c:	20 d0       	rcall	.+64     	; 0x186e <__ultoa_invert+0x84>
    182e:	09 f4       	brne	.+2      	; 0x1832 <__ultoa_invert+0x48>
    1830:	68 94       	set
    1832:	3f 91       	pop	r19
    1834:	2a e0       	ldi	r18, 0x0A	; 10
    1836:	26 9f       	mul	r18, r22
    1838:	11 24       	eor	r1, r1
    183a:	30 19       	sub	r19, r0
    183c:	30 5d       	subi	r19, 0xD0	; 208
    183e:	31 93       	st	Z+, r19
    1840:	de f6       	brtc	.-74     	; 0x17f8 <__ultoa_invert+0xe>
    1842:	cf 01       	movw	r24, r30
    1844:	08 95       	ret
    1846:	46 2f       	mov	r20, r22
    1848:	47 70       	andi	r20, 0x07	; 7
    184a:	40 5d       	subi	r20, 0xD0	; 208
    184c:	41 93       	st	Z+, r20
    184e:	b3 e0       	ldi	r27, 0x03	; 3
    1850:	0f d0       	rcall	.+30     	; 0x1870 <__ultoa_invert+0x86>
    1852:	c9 f7       	brne	.-14     	; 0x1846 <__ultoa_invert+0x5c>
    1854:	f6 cf       	rjmp	.-20     	; 0x1842 <__ultoa_invert+0x58>
    1856:	46 2f       	mov	r20, r22
    1858:	4f 70       	andi	r20, 0x0F	; 15
    185a:	40 5d       	subi	r20, 0xD0	; 208
    185c:	4a 33       	cpi	r20, 0x3A	; 58
    185e:	18 f0       	brcs	.+6      	; 0x1866 <__ultoa_invert+0x7c>
    1860:	49 5d       	subi	r20, 0xD9	; 217
    1862:	31 fd       	sbrc	r19, 1
    1864:	40 52       	subi	r20, 0x20	; 32
    1866:	41 93       	st	Z+, r20
    1868:	02 d0       	rcall	.+4      	; 0x186e <__ultoa_invert+0x84>
    186a:	a9 f7       	brne	.-22     	; 0x1856 <__ultoa_invert+0x6c>
    186c:	ea cf       	rjmp	.-44     	; 0x1842 <__ultoa_invert+0x58>
    186e:	b4 e0       	ldi	r27, 0x04	; 4
    1870:	a6 95       	lsr	r26
    1872:	97 95       	ror	r25
    1874:	87 95       	ror	r24
    1876:	77 95       	ror	r23
    1878:	67 95       	ror	r22
    187a:	ba 95       	dec	r27
    187c:	c9 f7       	brne	.-14     	; 0x1870 <__ultoa_invert+0x86>
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	61 05       	cpc	r22, r1
    1882:	71 05       	cpc	r23, r1
    1884:	08 95       	ret
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	0a 2e       	mov	r0, r26
    188c:	06 94       	lsr	r0
    188e:	57 95       	ror	r21
    1890:	47 95       	ror	r20
    1892:	37 95       	ror	r19
    1894:	27 95       	ror	r18
    1896:	ba 95       	dec	r27
    1898:	c9 f7       	brne	.-14     	; 0x188c <__ultoa_invert+0xa2>
    189a:	62 0f       	add	r22, r18
    189c:	73 1f       	adc	r23, r19
    189e:	84 1f       	adc	r24, r20
    18a0:	95 1f       	adc	r25, r21
    18a2:	a0 1d       	adc	r26, r0
    18a4:	08 95       	ret

000018a6 <_exit>:
    18a6:	f8 94       	cli

000018a8 <__stop_program>:
    18a8:	ff cf       	rjmp	.-2      	; 0x18a8 <__stop_program>
