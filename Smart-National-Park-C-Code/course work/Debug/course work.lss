
course work.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  00000234  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e28  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c97  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041b  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00002244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005eb  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025c  00000000  00000000  000028e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002b43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__vector_1>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e3       	ldi	r30, 0x34	; 52
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	3b d0       	rcall	.+118    	; 0x186 <main>
 110:	8f c0       	rjmp	.+286    	; 0x230 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_Z5latchv>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>

void latch(){
	PORTF &= ~(1 << PF6);
 114:	81 b3       	in	r24, 0x11	; 17
 116:	8f 7b       	andi	r24, 0xBF	; 191
 118:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	83 ec       	ldi	r24, 0xC3	; 195
 11c:	99 e0       	ldi	r25, 0x09	; 9
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <_Z5latchv+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <_Z5latchv+0x10>
 124:	00 00       	nop
	_delay_ms(10);
	PORTF |= (1 << PF6);
 126:	81 b3       	in	r24, 0x11	; 17
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	83 ec       	ldi	r24, 0xC3	; 195
 12e:	99 e0       	ldi	r25, 0x09	; 9
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <_Z5latchv+0x1c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <_Z5latchv+0x22>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <_Z14displayMessagePc>:
	_delay_ms(10);
}

void displayMessage(char *message){
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	8c 01       	movw	r16, r24
	
	PORTF &= ~(1 << PF4); //command mode
 144:	81 b3       	in	r24, 0x11	; 17
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	81 bb       	out	0x11, r24	; 17
	latch();
 14a:	e4 df       	rcall	.-56     	; 0x114 <_Z5latchv>
	
	PORTH = 0b00000001; //clear screen
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
	latch();
 152:	e0 df       	rcall	.-64     	; 0x114 <_Z5latchv>
	
	
	PORTF |= (1 << PF4); //data mode
 154:	81 b3       	in	r24, 0x11	; 17
 156:	80 61       	ori	r24, 0x10	; 16
 158:	81 bb       	out	0x11, r24	; 17
	PORTF &= ~(1 << PF5); //write mode
 15a:	81 b3       	in	r24, 0x11	; 17
 15c:	8f 7d       	andi	r24, 0xDF	; 223
	
	latch();
 15e:	81 bb       	out	0x11, r24	; 17
 160:	d9 df       	rcall	.-78     	; 0x114 <_Z5latchv>
	int i;
	
	for (i = 0; message[i] != '\0'; i++)
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	f8 01       	movw	r30, r16
 168:	ec 0f       	add	r30, r28
 16a:	fd 1f       	adc	r31, r29
 16c:	80 81       	ld	r24, Z
 16e:	88 23       	and	r24, r24
	{
		PORTH = message[i];
 170:	29 f0       	breq	.+10     	; 0x17c <_Z14displayMessagePc+0x42>
 172:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		latch();
 176:	ce df       	rcall	.-100    	; 0x114 <_Z5latchv>
	PORTF &= ~(1 << PF5); //write mode
	
	latch();
	int i;
	
	for (i = 0; message[i] != '\0'; i++)
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	f5 cf       	rjmp	.-22     	; 0x166 <_Z14displayMessagePc+0x2c>
	{
		PORTH = message[i];
		latch();
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <main>:

int main(void)
{
    /* Replace with your application code */
	EIMSK |= (1 << INT0); //register the int 0 pin
 186:	8d b3       	in	r24, 0x1d	; 29
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	8d bb       	out	0x1d, r24	; 29
	DDRJ = 0xff;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
	DDRD = 0x00;
 192:	1a b8       	out	0x0a, r1	; 10
	DDRH = 0xff;
 194:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
	DDRF = 0xff;
 198:	80 bb       	out	0x10, r24	; 16
	sei();
 19a:	78 94       	sei
	
	PORTF &= ~(1 << PF4); //command mode
 19c:	81 b3       	in	r24, 0x11	; 17
 19e:	8f 7e       	andi	r24, 0xEF	; 239
 1a0:	81 bb       	out	0x11, r24	; 17
	PORTF &= ~(1 << PF5); //write mode
 1a2:	81 b3       	in	r24, 0x11	; 17
 1a4:	8f 7d       	andi	r24, 0xDF	; 223
 1a6:	81 bb       	out	0x11, r24	; 17
	latch();
 1a8:	b5 df       	rcall	.-150    	; 0x114 <_Z5latchv>
	
	PORTH = 0x0f; //display
 1aa:	8f e0       	ldi	r24, 0x0F	; 15
 1ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
	latch();
 1b0:	b1 df       	rcall	.-158    	; 0x114 <_Z5latchv>
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <main+0x2c>

000001b4 <__vector_1>:
    while (1) {
    }
}


ISR(INT0_vect){
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	0b b6       	in	r0, 0x3b	; 59
 1c0:	0f 92       	push	r0
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	4f 93       	push	r20
 1c8:	5f 93       	push	r21
 1ca:	6f 93       	push	r22
 1cc:	7f 93       	push	r23
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	PORTJ = 0xff;
 1de:	c5 e0       	ldi	r28, 0x05	; 5
 1e0:	d1 e0       	ldi	r29, 0x01	; 1
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	88 83       	st	Y, r24
	displayMessage("Car at Gate");
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	a7 df       	rcall	.-178    	; 0x13a <_Z14displayMessagePc>
 1ec:	2f e7       	ldi	r18, 0x7F	; 127
 1ee:	8a e1       	ldi	r24, 0x1A	; 26
 1f0:	96 e0       	ldi	r25, 0x06	; 6
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <__vector_1+0x3e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <__vector_1+0x48>
 1fc:	00 00       	nop
	
	_delay_ms(2000);
	
	PORTJ = 0x00;
 1fe:	18 82       	st	Y, r1
	
	displayMessage("register");
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	9a df       	rcall	.-204    	; 0x13a <_Z14displayMessagePc>
}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0b be       	out	0x3b, r0	; 59
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
